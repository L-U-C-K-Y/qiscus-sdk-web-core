{"version":3,"file":"qiscus-sdk-javascript.min.js","sources":["../src/adapters/http.ts","../src/adapters/logger.ts","../src/defs.ts","../src/utils/url-builder.ts","../src/adapters/message.ts","../src/adapters/sync.ts","../src/utils/match.ts","../src/adapters/mqtt.ts","../src/utils/stream.ts","../src/adapters/realtime.ts","../src/adapters/room.ts","../src/adapters/user.ts","../src/utils/param-utils.ts","../src/main.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport it from \"param.macro\";\r\nimport { Derivable } from \"derivable\";\r\n\r\nexport interface IQHttpAdapter {\r\n  get<T>(path: string): Promise<T>;\r\n  post<T>(path: string, data?: object): Promise<T>;\r\n  postFormData<T>(path: string, form: FormData): Promise<T>;\r\n  patch<T>(path: string, data?: object): Promise<T>;\r\n  put<T>(path: string, data?: object): Promise<T>;\r\n  delete<T>(path: string, data?: object): Promise<T>;\r\n  upload<T>(\r\n    path: string,\r\n    data: object,\r\n    progressCallback: (progress: number) => void\r\n  ): Promise<T>;\r\n}\r\n\r\nexport type Params = {\r\n  baseUrl: string;\r\n  httpHeader: Derivable<{ [key: string]: string }>;\r\n  getAppId: () => string;\r\n  getUserId: () => string;\r\n  getToken: () => string;\r\n  getSdkVersion: () => string;\r\n};\r\nexport default function getHttpAdapter({\r\n  baseUrl,\r\n  httpHeader,\r\n  getAppId,\r\n  getUserId,\r\n  getToken,\r\n  getSdkVersion\r\n}: Params): IQHttpAdapter {\r\n  const api = axios.create({\r\n    baseURL: baseUrl\r\n  });\r\n  api.interceptors.request.use(req => {\r\n    const headers = {\r\n      // \"qiscus-sdk-app-id\": getAppId(),\r\n      // \"qiscus-sdk-user-id\": getUserId(),\r\n      // \"qiscus-sdk-token\": getToken(),\r\n      // \"qiscus-sdk-version\": getSdkVersion(),\r\n      // \"qiscus-sdk-platform\": \"JavaScript\",\r\n      qiscus_sdk_app_id: getAppId(),\r\n      qiscus_sdk_user_id: getUserId(),\r\n      qiscus_sdk_token: getToken(),\r\n      qiscus_sdk_version: getSdkVersion(),\r\n      qiscus_sdk_platform: \"JavaScript\"\r\n    };\r\n    const additionalHeaders = httpHeader.get();\r\n    if (additionalHeaders != null) {\r\n      Object.keys(additionalHeaders).forEach(key => {\r\n        headers[key] = additionalHeaders[key];\r\n      });\r\n    }\r\n    Object.assign(req.headers, headers);\r\n    return req;\r\n  });\r\n\r\n  return {\r\n    delete<T>(path: string, data?: object): Promise<T> {\r\n      return api\r\n        .delete(path, {\r\n          data\r\n        })\r\n        .then(it.data);\r\n    },\r\n    get<T>(path: string): Promise<T> {\r\n      return api.get<T>(path).then(it.data);\r\n    },\r\n    patch<T>(path: string, data?: object): Promise<T> {\r\n      return api.patch<T>(path, data).then(it.data);\r\n    },\r\n    post<T>(path: string, data?: object): Promise<T> {\r\n      return api.post<T>(path, data).then(it.data);\r\n    },\r\n    postFormData<T>(path: string, form: FormData): Promise<T> {\r\n      return api.post<T>(path, form).then(it.data);\r\n    },\r\n    put<T>(path: string, data?: object): Promise<T> {\r\n      return api.put<T>(path, data).then(it.data);\r\n    },\r\n    upload<T>(\r\n      path: string,\r\n      data: object,\r\n      progressCallback: (progress: number) => void\r\n    ): Promise<T> {\r\n      return api\r\n        .post<T>(path, data, {\r\n          onUploadProgress(progress: ProgressEvent) {\r\n            const percentage = (progress.loaded / progress.total) * 100;\r\n            progressCallback(percentage);\r\n          }\r\n        })\r\n        .then(it.data);\r\n    }\r\n  };\r\n}\r\n","import { atom, Derivable } from \"derivable\";\r\n\r\nexport type ILogger = {\r\n  isEnabled: Derivable<boolean>;\r\n  setEnable(enable: boolean): void;\r\n  log(...args: any[]): void;\r\n};\r\nexport function getLogger(): ILogger {\r\n  const enabled = atom<boolean>(false);\r\n  const log = enabled.derive(isEnabled =>\r\n    isEnabled\r\n      ? (...args: any[]) => console.log(\"QiscusSDK:\", ...args)\r\n      : () => {}\r\n  );\r\n  return {\r\n    isEnabled: enabled.derive(it => it),\r\n    setEnable: enable => enabled.set(enable),\r\n    log: log.get()\r\n  };\r\n}\r\n","import { Atom, Derivable, Lens } from \"derivable\";\r\nimport { PostCommentResponse } from \"./adapters/message\";\r\n\r\nexport type IQCallback<T> = (response: T, error?: Error) => void;\r\n\r\nexport type IQProgressListener = (\r\n  error?: Error,\r\n  progress?: number,\r\n  url?: string\r\n) => void;\r\n\r\nexport interface Callback<T1> {\r\n  (data1: T1): void;\r\n}\r\nexport interface Subscription {\r\n  (): void;\r\n}\r\n\r\nexport interface IQiscus {\r\n  setup(appId: string, syncInterval: number): void;\r\n  setupWithCustomServer(\r\n    appId: string,\r\n    baseUrl: string,\r\n    brokerUrl: string,\r\n    brokerLbUrl: string,\r\n    syncInterval: number\r\n  ): void;\r\n\r\n  // for event handler ------------------------------\r\n  onMessageReceived(handler: (message: IQMessage) => void): Subscription;\r\n  onMessageDeleted(handler: (message: IQMessage) => void): Subscription;\r\n  onMessageDelivered(handler: (message: IQMessage) => void): Subscription;\r\n  onMessageRead(handler: (message: IQMessage) => void): Subscription;\r\n  onUserTyping(\r\n    handler: (userId: string, roomId: number, isTyping: boolean) => void\r\n  ): Subscription;\r\n  onUserOnlinePresence(\r\n    handler: (userId: string, isOnline: boolean, lastSeen: Date) => void\r\n  ): Subscription;\r\n  onChatRoomCleared(handler: (roomId: number) => void): Subscription;\r\n  onConnected(handler: () => void): Subscription;\r\n  onReconnecting(handler: () => void): Subscription;\r\n  onDisconnected(handler: () => void): Subscription;\r\n  subscribeChatRoom(room: IQRoom): void;\r\n  unsubscribeChatRoom(room: IQRoom): void;\r\n  subscribeUserOnlinePresence(userId: string): void;\r\n  unsubscribeUserOnlinePresence(userId: string): void;\r\n  // ------------------------------------------------\r\n\r\n  // from UserAdapter -------------------------------\r\n  setUser(\r\n    userId: string,\r\n    userKey: string,\r\n    username: string,\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback: IQCallback<IQUser>\r\n  ): void | Promise<IQUser>;\r\n  setUserWithIdentityToken(\r\n    token: string,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser>;\r\n  blockUser(\r\n    userId: string,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser>;\r\n  unblockUser(\r\n    userId: string,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser>;\r\n  getBlockedUsers(\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQUser[]>\r\n  ): void | Promise<IQUser[]>;\r\n  getUserData(callback?: IQCallback<IQUser>): void | Promise<IQUser>;\r\n  updateUser(\r\n    username?: string,\r\n    avatarUrl?: string,\r\n    extras?: object,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser>;\r\n  getUsers(\r\n    searchUsername?: string,\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQUser[]>\r\n  ): void | Promise<IQUser[]>;\r\n  // ------------------------------------------------\r\n\r\n  // TODO: I'm not discussed yet\r\n  clearUser(callback?: IQCallback<void>): void;\r\n\r\n  // from RoomAdapter ----------\r\n  chatUser(\r\n    userId: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  createGroupChat(\r\n    name: string,\r\n    userIds: string[],\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  createChannel(\r\n    uniqueId: string,\r\n    name: string,\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  getChannel(\r\n    uniqueId: string,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  updateChatRoom(\r\n    roomId: number,\r\n    name: string,\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  addParticipants(\r\n    roomId: number,\r\n    userIds: string[],\r\n    callback?: IQCallback<IQParticipant[]>\r\n  ): void | Promise<IQParticipant[]>;\r\n  removeParticipants(\r\n    roomId: number,\r\n    userIds: string[],\r\n    callback?: IQCallback<IQParticipant[]>\r\n  ): void | Promise<IQParticipant[] | string[]>;\r\n  getChatRoomWithMessages(\r\n    roomId: number,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom>;\r\n  getChatRooms(\r\n    roomIds: number[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  getChatRooms(\r\n    uniqueIds: string[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  getAllChatRooms(\r\n    showParticipant?: boolean,\r\n    showRemoved?: boolean,\r\n    showEmpty?: boolean,\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  getParticipants(\r\n    roomUniqueId: string,\r\n    offset?: number,\r\n    sorting?: \"asc\" | \"desc\" | null,\r\n    callback?: IQCallback<IQParticipant[]>\r\n  ): void;\r\n  // ---------------------------\r\n\r\n  // from MessageAdapter -----------------------------------\r\n  sendMessage(\r\n    roomId: number,\r\n    message: IQMessageT,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage>;\r\n  markAsRead(\r\n    roomId: number,\r\n    messageId: number,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage>;\r\n  markAsDelivered(\r\n    roomId: number,\r\n    messageId: number,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage>;\r\n  getPreviouseMessagesById(\r\n    roomId: number,\r\n    limit?: number,\r\n    messageId?: number,\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]>;\r\n  getNextMessagesById(\r\n    roomId: number,\r\n    limit?: number,\r\n    messageId?: number,\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]>;\r\n  deleteMessages(\r\n    messageUniqueIds: string[],\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]>;\r\n  clearMessagesByChatRoomId(\r\n    roomUniqueIds: string[],\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  // -------------------------------------------------------\r\n\r\n  // Misc -------------------------------------\r\n  upload(file: File, callback?: IQProgressListener): void;\r\n  registerDeviceToken(\r\n    token: string,\r\n    callback?: IQCallback<boolean>\r\n  ): void | Promise<boolean>;\r\n  removeDeviceToken(\r\n    token: string,\r\n    callback?: IQCallback<boolean>\r\n  ): void | Promise<boolean>;\r\n  getJWTNonce(callback?: IQCallback<string>): void | Promise<string>;\r\n  synchronize(lastMessageId: number): void;\r\n  synchronizeEvent(lastEventId: number): void;\r\n  getTotalUnreadCount(callback?: IQCallback<number>): void | Promise<number>;\r\n  setSyncInterval(interval: number): void;\r\n  hasSetupUser(callback?: (isSetup: boolean) => void): void | Promise<boolean>;\r\n  getThumbnailURL(url: string): string;\r\n  sendFileMessage(\r\n    roomId: number,\r\n    message: string,\r\n    file: File,\r\n    callback: (error: Error, progress: number, message: IQMessage) => void\r\n  ): void;\r\n\r\n  // ------------------------------------------\r\n  publishTyping(roomId: number, isTyping?: boolean): void;\r\n\r\n  // from CustomEventAdapter\r\n  publishCustomEvent(roomId: number, data: any): void;\r\n  subscribeCustomEvent(roomId: number, callback: IQCallback<any>): void;\r\n  unsubscribeCustomEvent(roomId: number): void;\r\n}\r\n\r\nexport interface IQUserExtraProps {\r\n  avatarUrl?: string;\r\n  name?: string;\r\n  extras?: string;\r\n}\r\n\r\nexport interface IQUserAdapter {\r\n  login(\r\n    userId: string,\r\n    userKey: string,\r\n    extra: IQUserExtraProps\r\n  ): Promise<IQUser>;\r\n  clear(): void;\r\n  updateUser(name: string, avatarUrl: string, extras: string): Promise<IQUser>;\r\n  getNonce(): Promise<QNonce>;\r\n  setUserFromIdentityToken(token: string): Promise<IQUser>;\r\n  getUserList(query: string, page?: number, limit?: number): Promise<IQUser[]>;\r\n  getBlockedUser(page?: number, limit?: number): Promise<IQUser[]>;\r\n  blockUser(userId: string): Promise<IQUser>;\r\n  unblockUser(userId: string): Promise<IQUser>;\r\n  getUserData(): Promise<IQUser>;\r\n  registerDeviceToken(token: string): Promise<boolean>;\r\n  unregisterDeviceToken(token: string): Promise<boolean>;\r\n\r\n  readonly token: Derivable<string>;\r\n  readonly currentUser: Derivable<IQUser>;\r\n}\r\n\r\nexport interface IQUser {\r\n  id: number;\r\n  userId: string;\r\n  displayName: string;\r\n  avatarUrl?: string | null;\r\n}\r\n\r\nexport type QNonce = { expired: number; nonce: string };\r\n\r\nexport enum IQRoomType {\r\n  Group = \"group\",\r\n  Single = \"single\"\r\n}\r\n\r\nexport interface IQRoom {\r\n  id: number;\r\n  name: string;\r\n  avatarUrl: string;\r\n  isChannel: boolean;\r\n  lastMessageId?: number;\r\n  lastMessageContent?: string;\r\n  uniqueId: string;\r\n  unreadCount: number;\r\n  type: IQRoomType;\r\n  totalParticipants?: number;\r\n  participants?: IQParticipant[];\r\n  options?: string;\r\n  messages?: IQMessage[];\r\n}\r\n\r\nexport interface IQParticipant extends IQUser {\r\n  lastReadMessageId: number;\r\n  lastReceivedMessageId: number;\r\n}\r\n\r\nexport interface IQRoomAdapter {\r\n  chatUser(userId: string, extras: any): Promise<IQRoom>;\r\n  getRoomList(\r\n    showParticipant?: boolean,\r\n    showRemoved?: boolean,\r\n    showEmpty?: boolean,\r\n    page?: number,\r\n    limit?: number\r\n  ): Promise<IQRoom[]>;\r\n  getRoom(roomId: number): Promise<IQRoom>;\r\n  getChannel(\r\n    uniqueId: string,\r\n    name?: string,\r\n    avatarUrl?: string,\r\n    extras?: string\r\n  ): Promise<IQRoom>;\r\n  updateRoom(\r\n    roomId: number,\r\n    name?: string | null,\r\n    avatarUrl?: string | null,\r\n    extras?: string | null\r\n  ): Promise<IQRoom>;\r\n  getParticipantList(\r\n    roomId: string,\r\n    offset?: number | null,\r\n    sorting?: \"asc\" | \"desc\" | null\r\n  ): Promise<IQParticipant[]>;\r\n  createGroup(\r\n    name: string,\r\n    userIds: string[],\r\n    avatarUrl?: string,\r\n    extras?: string\r\n  ): Promise<IQRoom>;\r\n  removeParticipants(\r\n    roomId: number,\r\n    participantIds: string[]\r\n  ): Promise<IQParticipant[]>;\r\n\r\n  addParticipants(\r\n    roomId: number,\r\n    participantIds: string[]\r\n  ): Promise<IQParticipant[]>;\r\n\r\n  getRoomInfo(\r\n    roomId?: number[],\r\n    uniqueId?: string[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean\r\n  ): Promise<IQRoom[]>;\r\n  clearRoom(roomUniqueIds: string[]): Promise<IQRoom[]>;\r\n  getUnreadCount(): Promise<number>;\r\n  readonly rooms: Derivable<{ [key: string]: IQRoom }>;\r\n  readonly getRoomDataWithId: (roomId: number) => Lens<IQRoom>;\r\n  readonly getRoomDataWithUniqueId: (roomUniqueId: string) => Lens<IQRoom>;\r\n}\r\n\r\nexport type IQMessageT = {\r\n  payload: object;\r\n  extras: object;\r\n  type: string;\r\n  message: string;\r\n};\r\nexport enum IQMessageStatus {\r\n  Sending = \"sending\",\r\n  Sent = \"sent\",\r\n  Delivered = \"delivered\",\r\n  Read = \"read\",\r\n  Failed = \"failed\"\r\n}\r\n\r\nexport enum IQMessageType {\r\n  Text = \"text\",\r\n  Custom = \"custom\",\r\n  Attachment = \"file_attachment\"\r\n}\r\n\r\nexport interface IQMessage {\r\n  id: number;\r\n  uniqueId: string;\r\n  roomId: number;\r\n  userId: string;\r\n  content: string;\r\n  previousMessageId: number;\r\n  extras: object;\r\n  payload: object;\r\n  timestamp: Date;\r\n  type: IQMessageType;\r\n  status: IQMessageStatus;\r\n\r\n  updateFromJson(json: PostCommentResponse.Comment): IQMessage;\r\n}\r\n\r\nexport interface IQMessageAdapter {\r\n  readonly messages: Atom<{ [key: string]: IQMessage }>;\r\n  readonly getMessageDataWithId: (messageId: number) => Lens<IQMessage>;\r\n  sendMessage(roomId: number, message: IQMessageT): Promise<IQMessage>;\r\n  getMessages(\r\n    roomId: number,\r\n    lastMessageId?: number,\r\n    limit?: number,\r\n    after?: boolean\r\n  ): Promise<IQMessage[]>;\r\n  deleteMessage(messageUniqueIds: string[]): Promise<IQMessage[]>;\r\n  markAsRead(roomId: number, messageId: number): Promise<IQMessage>;\r\n  markAsDelivered(roomId: number, messageId: number): Promise<IQMessage>;\r\n}\r\n\r\nexport type UploadResult = {\r\n  results: {\r\n    file: {\r\n      name: string;\r\n      pages: number;\r\n      size: number;\r\n      url: string;\r\n    };\r\n  };\r\n  status: number;\r\n};\r\n","interface IQUrlBuilder {\r\n  param (key: string, value: any): IQUrlBuilder\r\n  build (): string\r\n}\r\n\r\nexport default function QUrlBuilder (basePath: string): IQUrlBuilder {\r\n  const params = {};\r\n\r\n  const getQuery = (key, value) => `${key}=${value}`;\r\n\r\n  return {\r\n    param (key: string, value: any): IQUrlBuilder {\r\n      params[key] = value;\r\n      return this\r\n    },\r\n    build (): string {\r\n      const query = Object.keys(params)\r\n        .filter(key => params[key] != null)\r\n        .map(key => {\r\n          if (Array.isArray(params[key])) {\r\n            return params[key].map(value => getQuery(`${key}[]`, value)).join('&')\r\n          }\r\n          return getQuery(key, params[key])\r\n        })\r\n        .join('&');\r\n\r\n      return [basePath].concat(query).join('?')\r\n    }\r\n  }\r\n}\r\n","import cuid from \"cuid\";\r\nimport { atom, Atom, lens } from \"derivable\";\r\nimport { mod, findBy, matching } from \"shades\";\r\nimport {\r\n  IQMessage,\r\n  IQMessageAdapter,\r\n  IQMessageStatus,\r\n  IQMessageT,\r\n  IQMessageType,\r\n  IQRoomAdapter,\r\n  IQUserAdapter,\r\n  IQParticipant\r\n} from \"../defs\";\r\nimport QUrlBuilder from \"../utils/url-builder\";\r\nimport { IQHttpAdapter } from \"./http\";\r\n\r\nconst lessThanEq = (a: number) => (b: number) => a <= b;\r\n\r\nexport const getMessageType = (type: string) => {\r\n  switch (type) {\r\n    case \"custom\":\r\n      return IQMessageType.Custom;\r\n    case \"text\":\r\n    default:\r\n      return IQMessageType.Text;\r\n  }\r\n};\r\n\r\nexport type JsonMessage = {\r\n  id: number;\r\n  message: string;\r\n  comment_before_id: number;\r\n  room_id: number;\r\n  status: string;\r\n  timestamp: Date;\r\n  unix_timestamp: number;\r\n  type: string;\r\n  unique_temp_id: string;\r\n  extras: object;\r\n  payload: object;\r\n  username: string;\r\n  email: string;\r\n};\r\n\r\nexport class QMessage implements IQMessage {\r\n  id: number;\r\n  content: string;\r\n  previousMessageId: number;\r\n  roomId: number;\r\n  status: IQMessageStatus;\r\n  timestamp: Date;\r\n  type: IQMessageType;\r\n  userId: string;\r\n  uniqueId: string;\r\n  extras: object;\r\n  payload: object;\r\n\r\n  updateFromJson(json: JsonMessage): IQMessage {\r\n    this.id = json.id;\r\n    this.content = json.message;\r\n    this.previousMessageId = json.comment_before_id;\r\n    this.roomId = json.room_id;\r\n    this.timestamp = new Date(json.timestamp);\r\n    this.userId = json.email;\r\n    this.uniqueId = json.unique_temp_id;\r\n    this.extras = json.extras;\r\n    this.payload = json.payload;\r\n    if (json.type === \"text\") this.type = IQMessageType.Text;\r\n    if (json.type === \"custom\") this.type = IQMessageType.Custom;\r\n    if (json.status === \"delivered\") this.status = IQMessageStatus.Delivered;\r\n    if (json.status === \"read\") this.status = IQMessageStatus.Read;\r\n    return this;\r\n  }\r\n\r\n  static fromJson(json: JsonMessage): IQMessage {\r\n    return new QMessage().updateFromJson(json);\r\n  }\r\n\r\n  static prepareNew(\r\n    userId: string,\r\n    roomId: number,\r\n    content: string,\r\n    type = IQMessageType.Text,\r\n    extras: object = {},\r\n    payload: object = {}\r\n  ): IQMessage {\r\n    const timestamp = new Date();\r\n    const message = new QMessage();\r\n    message.content = content;\r\n    message.type = type;\r\n    message.status = IQMessageStatus.Sending;\r\n    message.roomId = roomId;\r\n    message.timestamp = timestamp;\r\n    message.userId = userId;\r\n    message.uniqueId = `js-${cuid()}`;\r\n    message.extras = extras;\r\n    message.payload = payload;\r\n    return message;\r\n  }\r\n}\r\n\r\nexport default function getMessageAdapter(\r\n  http: Atom<IQHttpAdapter>,\r\n  user: Atom<IQUserAdapter>,\r\n  roomAdapter: Atom<IQRoomAdapter>\r\n): IQMessageAdapter {\r\n  const messages = atom<{ [key: string]: IQMessage }>({});\r\n  const getMessageDataWithId = (messageId: number) =>\r\n    lens<IQMessage>({\r\n      get() {\r\n        return Object.values(messages.get()).find(it => it.id === messageId);\r\n      },\r\n      set(message) {\r\n        messages.update(msgs => {\r\n          if (message != null) msgs[message.uniqueId] = message;\r\n          return msgs;\r\n        });\r\n      }\r\n    });\r\n  return {\r\n    get messages() {\r\n      return messages;\r\n    },\r\n    get getMessageDataWithId() {\r\n      return getMessageDataWithId;\r\n    },\r\n    sendMessage(roomId: number, messageT: IQMessageT): Promise<IQMessage> {\r\n      const userId = user.get().currentUser.get().userId;\r\n      const message = QMessage.prepareNew(userId, roomId, messageT.message);\r\n      messages.update(messages => ({\r\n        ...messages,\r\n        [message.uniqueId]: message\r\n      }));\r\n      const url = \"post_comment\";\r\n\r\n      const data = new FormData();\r\n      data.append(\"token\", user.get().token.get());\r\n      data.append(\"topic_id\", String(message.roomId));\r\n      data.append(\"comment\", message.content);\r\n      data.append(\"payload\", JSON.stringify(message.payload));\r\n      data.append(\"extras\", JSON.stringify(message.extras));\r\n\r\n      return http\r\n        .get()\r\n        .postFormData<PostCommentResponse.RootObject>(url, data)\r\n        .then(resp => resp.results.comment)\r\n        .then<IQMessage>(comment => {\r\n          message.updateFromJson(comment);\r\n          messages.update(messages => ({\r\n            ...messages,\r\n            [message.uniqueId]: message\r\n          }));\r\n          return message;\r\n        });\r\n    },\r\n    getMessages(\r\n      roomId: number,\r\n      lastMessageId: number = 0,\r\n      limit: number = 20,\r\n      after: boolean = false\r\n    ): Promise<IQMessage[]> {\r\n      const url = QUrlBuilder(\"load_comments\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"topic_id\", roomId)\r\n        .param(\"last_comment_id\", lastMessageId)\r\n        .param(\"limit\", limit)\r\n        .param(\"after\", after)\r\n        .build();\r\n      return http\r\n        .get()\r\n        .get<GetCommentsResponse.RootObject>(url)\r\n        .then(res => res.results.comments)\r\n        .then(comments => {\r\n          const _messages = comments.map(it => QMessage.fromJson(it));\r\n          // _messages.forEach(it => messages.update(msgs => ({ ...msgs, [it.uniqueId]: it })));\r\n          messages.update(msgs => {\r\n            _messages.forEach(msg => (msgs[msg.uniqueId] = msg));\r\n            return msgs;\r\n          });\r\n          return _messages;\r\n        });\r\n    },\r\n    deleteMessage(messageIds: string[]): Promise<IQMessage[]> {\r\n      const url = QUrlBuilder(\"delete_messages\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"unique_ids\", messageIds)\r\n        .build();\r\n      return http\r\n        .get()\r\n        .delete<DeleteCommentsResponse.RootObject>(url)\r\n        .then<IQMessage[]>(resp => {\r\n          return resp.results.comments.map<IQMessage>(comment => {\r\n            const message = messages.get()[comment.unique_temp_id];\r\n            if (message == null) return QMessage.fromJson(comment);\r\n            messages.update(messages => {\r\n              messages[comment.unique_temp_id] = undefined;\r\n              return messages;\r\n            });\r\n            return message;\r\n          });\r\n        });\r\n    },\r\n    markAsRead(roomId: number, messageId: number): Promise<IQMessage> {\r\n      const adapter = roomAdapter.get();\r\n      const url = QUrlBuilder(\"update_comment_status\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"last_comment_read_id\", messageId)\r\n        .param(\"room_id\", roomId)\r\n        .build();\r\n      return http\r\n        .get()\r\n        .post<UpdateCommentStatusResponse.RootObject>(url)\r\n        .then(resp => resp.results)\r\n        .then(result => {\r\n          // Update participant last read comment id\r\n          const selector = mod(\r\n            \"participants\",\r\n            findBy.of<IQParticipant>({ id: result.user_id })\r\n          );\r\n          const transformer = selector(it => ({\r\n            ...it,\r\n            lastReadMessageId: result.last_comment_read_id\r\n          }));\r\n          adapter.getRoomDataWithId(roomId).update(transformer);\r\n          const room = adapter.getRoomDataWithId(roomId).get();\r\n\r\n          // update comment status as read\r\n          // only if all participants has read it\r\n          // Find the lowest read id or the ID which all participants has read\r\n          const lowestMessageId = room.participants\r\n            .map(it => it.lastReadMessageId)\r\n            .sort()\r\n            .reduce((res, it) => (res > it ? it : res));\r\n          const _selector = mod(matching({ id: lessThanEq(lowestMessageId) }));\r\n          const _transformer = _selector<IQMessage>(message => {\r\n            message.status = IQMessageStatus.Read;\r\n            return message;\r\n          });\r\n          messages.update(_transformer);\r\n          return getMessageDataWithId(messageId).get();\r\n        });\r\n    },\r\n    markAsDelivered(roomId: number, messageId: number): Promise<IQMessage> {\r\n      const adapter = roomAdapter.get();\r\n      const url = QUrlBuilder(\"update_comment_status\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"last_comment_received_id\", messageId)\r\n        .param(\"room_id\", roomId)\r\n        .build();\r\n      return http\r\n        .get()\r\n        .post<UpdateCommentStatusResponse.RootObject>(url)\r\n        .then(resp => resp.results)\r\n        .then(result => {\r\n          adapter.getRoomDataWithId(roomId).update(room => {\r\n            if (room == null) return room;\r\n            const selector = mod(\r\n              \"participants\",\r\n              findBy.of<IQParticipant>({ id: result.user_id })\r\n            );\r\n            const transformer = selector(it => ({\r\n              ...it,\r\n              lastReceivedMessageId: result.last_comment_received_id\r\n            }));\r\n            return transformer(room);\r\n          });\r\n\r\n          const room = adapter.getRoomDataWithId(roomId).get();\r\n\r\n          if (room == null) return null;\r\n\r\n          const lowestMessageId = room.participants\r\n            .map(it => it.lastReceivedMessageId)\r\n            .sort()\r\n            .reduce((res, it) => (res > it ? it : res));\r\n          messages.update(msgs => {\r\n            const selector = mod(matching({ id: lessThanEq(lowestMessageId) }));\r\n            const changer = (it: IQMessage) => ({\r\n              ...it,\r\n              status: IQMessageStatus.Delivered\r\n            });\r\n            const transformer = selector(changer);\r\n            const result = transformer(msgs);\r\n            return result;\r\n          });\r\n          return getMessageDataWithId(messageId).get();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\n// Response type\r\nexport declare module PostCommentResponse {\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface Comment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: object;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: object;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: number;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    comment: Comment;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\nexport declare module GetCommentsResponse {\r\n  export interface Extras {}\r\n\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface Comment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: Payload;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: number;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    comments: Comment[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\nexport declare module DeleteCommentsResponse {\r\n  export interface Extras {}\r\n\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface Comment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: Payload;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: any;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    comments: Comment[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\nexport declare module UpdateCommentStatusResponse {\r\n  export interface Results {\r\n    changed: boolean;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\n","import { Derivable } from 'derivable'\r\nimport flatten from 'lodash.flatten'\r\nimport QUrlBuilder from '../utils/url-builder'\r\nimport { EventEmitter } from 'pietile-eventemitter'\r\nimport { IQMessage, IQMessageAdapter, IQRoom, IQRoomAdapter } from '../defs'\r\nimport { IQHttpAdapter } from './http'\r\nimport { JsonMessage, QMessage } from './message'\r\n\r\ntype CallbackMessageDelivery = (\r\n  roomId: number,\r\n  userId: string,\r\n  messageId: number,\r\n  messageUniqueId: string\r\n) => void;\r\nexport interface IQSyncAdapter {\r\n  synchronize(lastMessageId?: number): void;\r\n  synchronizeEvent(lastEventId?: number): void;\r\n  onNewMessage(callback: (message: IQMessage) => void): () => void;\r\n  onMessageRead(callback: CallbackMessageDelivery): () => void;\r\n  onMessageDelivered(callback: CallbackMessageDelivery): () => void;\r\n  onMessageDeleted(callback: (message: IQMessage) => void): () => void;\r\n  onRoomCleared(callback: (message: IQRoom) => void): () => void;\r\n}\r\n\r\nexport interface IQSyncEvent {\r\n  'room.cleared': (room: SyncEventResponse.DataRoomCleared) => void\r\n  'message.new': (message: IQMessage) => void\r\n  'message.delivered': (data: SyncEventResponse.DataMessageDelivered) => void\r\n  'message.deleted': (message: SyncEventResponse.DataMessageDeleted) => void\r\n  'message.read': (message: SyncEventResponse.DataMessageDelivered) => void\r\n  'last-message-id': (id: number) => void\r\n  'last-event-id': (id: number) => void\r\n}\r\n\r\nexport default function getSyncAdapter(\r\n  http: Derivable<IQHttpAdapter>,\r\n  messageAdapter: Derivable<IQMessageAdapter>,\r\n  roomAdapter: Derivable<IQRoomAdapter>,\r\n  token: Derivable<string>\r\n): IQSyncAdapter {\r\n  const emitter = new EventEmitter<IQSyncEvent>();\r\n  let lastMessageId = 0;\r\n  let lastEventId = 0;\r\n\r\n  return {\r\n    synchronize(messageId: number): void {\r\n      messageId = messageId || lastMessageId;\r\n      const url = QUrlBuilder('sync')\r\n        .param('token', token.get())\r\n        .param('last_received_comment_id', messageId)\r\n        .build();\r\n      http\r\n        .get()\r\n        .get<SyncResponse.RootObject>(url)\r\n        .then(\r\n          resp => {\r\n            const results = resp.results;\r\n            const messages = results.comments;\r\n            lastMessageId = results.meta.last_received_comment_id;\r\n            emitter.emit('last-message-id', lastMessageId);\r\n            messages\r\n              .map(\r\n                it =>\r\n                  ({ ...it, status: 'read', user_id: it.email } as JsonMessage)\r\n              )\r\n              .map(it => QMessage.fromJson(it))\r\n              .forEach(it => emitter.emit('message.new', it));\r\n          },\r\n          error => {\r\n            console.log('SyncAdapter:', 'error when synchronize', error);\r\n          }\r\n        );\r\n    },\r\n    synchronizeEvent(eventId: number): void {\r\n      eventId = eventId || lastEventId;\r\n      const url = QUrlBuilder('sync_event')\r\n        .param('token', token.get())\r\n        .param('start_event_id', eventId)\r\n        .build();\r\n\r\n      http\r\n        .get()\r\n        .get<SyncEventResponse.RootObject>(url)\r\n        .then(resp => {\r\n          const events = resp.events;\r\n          const lastId = events\r\n            .map(it => it.id)\r\n            .slice()\r\n            .sort((a, b) => a - b)\r\n            .pop();\r\n          if (lastId != null) {\r\n            lastEventId = lastId;\r\n            emitter.emit('last-event-id', lastEventId);\r\n          }\r\n          for (let event of events) {\r\n            if (event.action_topic === 'delivered') {\r\n              emitter.emit('message.delivered', event.payload\r\n                .data as SyncEventResponse.DataMessageDelivered);\r\n            }\r\n            if (event.action_topic === 'read') {\r\n              emitter.emit('message.read', event.payload\r\n                .data as SyncEventResponse.DataMessageDelivered);\r\n            }\r\n            if (event.action_topic === 'deleted_message') {\r\n              emitter.emit('message.deleted', event.payload\r\n                .data as SyncEventResponse.DataMessageDeleted);\r\n            }\r\n            if (event.action_topic === 'clear_room') {\r\n              emitter.emit('room.cleared', event.payload\r\n                .data as SyncEventResponse.DataRoomCleared);\r\n            }\r\n          }\r\n        });\r\n    },\r\n    onNewMessage(callback: (message: IQMessage) => void): () => void {\r\n      emitter.on('message.new', callback);\r\n      return () => emitter.off('message.new', callback);\r\n    },\r\n    onMessageDelivered(\r\n      callback: (\r\n        roomId: number,\r\n        userId: string,\r\n        messageId: number,\r\n        messageUniqueId: string\r\n      ) => void\r\n    ): () => void {\r\n      const handler = (data: SyncEventResponse.DataMessageDelivered) => {\r\n        callback(\r\n          data.room_id,\r\n          data.email,\r\n          data.comment_id,\r\n          data.comment_unique_id\r\n        );\r\n      };\r\n      emitter.on('message.delivered', handler);\r\n      return () => emitter.off('message.delivered', handler);\r\n    },\r\n    onMessageRead(\r\n      callback: (\r\n        roomId: number,\r\n        userId: string,\r\n        messageId: number,\r\n        messageUniqueId: string\r\n      ) => void\r\n    ): () => void {\r\n      const handler = (data: SyncEventResponse.DataMessageDelivered) => {\r\n        callback(\r\n          data.room_id,\r\n          data.email,\r\n          data.comment_id,\r\n          data.comment_unique_id\r\n        );\r\n      };\r\n      emitter.on('message.read', handler);\r\n      return () => emitter.off('message.read', handler);\r\n    },\r\n    onMessageDeleted(callback: (message: IQMessage) => void): () => void {\r\n      const adapter = messageAdapter.get();\r\n      const messages = adapter.messages.get();\r\n      const handler = (data: SyncEventResponse.DataMessageDeleted) => {\r\n        let msgs = data.deleted_messages.map(it =>\r\n          it.message_unique_ids.map(id => messages[id])\r\n        );\r\n        (flatten(msgs) as IQMessage[]).forEach(message => callback(message));\r\n      };\r\n      emitter.on('message.deleted', handler);\r\n      return () => emitter.off('message.deleted', handler);\r\n    },\r\n    onRoomCleared(callback: (message: IQRoom) => void): () => void {\r\n      const adapter = roomAdapter.get();\r\n      const rooms = adapter.rooms.get();\r\n      const handler = (data: SyncEventResponse.DataRoomCleared) => {\r\n        data.deleted_rooms\r\n          .map(room => rooms[room.id])\r\n          .forEach(room => callback(room));\r\n      };\r\n      emitter.on('room.cleared', handler);\r\n      return () => emitter.off('room.cleared', handler);\r\n    }\r\n  };\r\n}\r\n\r\n// Response type\r\ndeclare module SyncResponse {\r\n  export interface Meta {\r\n    last_received_comment_id: number;\r\n    need_clear: boolean;\r\n  }\r\n\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface Comment {\r\n    id: number;\r\n    topic_id: number;\r\n    room_id: number;\r\n    room_name: string;\r\n    comment_before_id: number;\r\n    message: string;\r\n    type: string;\r\n    payload: Payload;\r\n    extras?: any;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    username: string;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    timestamp: Date;\r\n    unix_timestamp: number;\r\n    unique_temp_id: string;\r\n  }\r\n\r\n  export interface Results {\r\n    meta: Meta;\r\n    comments: Comment[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    status: number;\r\n    results: Results;\r\n  }\r\n}\r\ndeclare module SyncEventResponse {\r\n  export interface Actor {\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n  }\r\n\r\n  export interface DeletedMessage {\r\n    message_unique_ids: string[];\r\n    room_id: string;\r\n  }\r\n  export interface DeletedRoom {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment: any;\r\n    options: object;\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface DataMessageDeleted {\r\n    deleted_messages: DeletedMessage[];\r\n    is_hard_delete: boolean;\r\n  }\r\n  export interface DataRoomCleared {\r\n    deleted_rooms: DeletedRoom[];\r\n  }\r\n\r\n  export interface DataMessageDelivered {\r\n    comment_id: number;\r\n    comment_unique_id: string;\r\n    email: string;\r\n    room_id: number;\r\n  }\r\n\r\n  export interface Payload {\r\n    actor: Actor;\r\n    data: DataMessageDeleted | DataMessageDelivered | DataRoomCleared;\r\n  }\r\n\r\n  export interface Event {\r\n    id: any;\r\n    timestamp: any;\r\n    action_topic: 'read' | 'delivered' | 'clear_room' | 'deleted_message';\r\n    payload: Payload;\r\n  }\r\n\r\n  export interface RootObject {\r\n    events: Event[];\r\n    is_start_event_id_found: boolean;\r\n  }\r\n}\r\n","// Taken from https://github.com/FGRibreau/match-when/blob/master/match.js\r\n// @ts-ignore\r\n// import Symbol from \"es6-symbol\";\r\nconst _catchAllSymbol = Symbol(\"match.pattern.catchAll\");\r\nconst _patternOR = Symbol(\"match.pattern.OR\");\r\nconst _patternORStr = _patternOR.toString(); // Dirty hack\r\nconst _patternAND = Symbol(\"match.pattern.AND\");\r\nconst _patternANDStr = _patternAND.toString(); // Dirty hack\r\nconst _patternRANGE = Symbol(\"match.pattern.RANGE\");\r\nconst _patternRANGEStr = _patternRANGE.toString(); // Dirty hack\r\n\r\nconst _patternREGEXP = Symbol(\"match.pattern.REGEXP\");\r\nconst _patternREGEXPStr = _patternREGEXP.toString(); // Dirty hack\r\nconst EXTRACT_PATTERN_AND_FLAGS = /\\/(.*)\\/(.*)/;\r\n\r\nfunction MissingCatchAllPattern() {\r\n  Error.call(\r\n    this,\r\n    \"Missing when() catch-all pattern as last match argument, add [when()]: void 0\"\r\n  );\r\n  if (!(\"stack\" in this)) {\r\n    this.stack = new Error().stack;\r\n  }\r\n}\r\n\r\nMissingCatchAllPattern.prototype = Object.create(Error.prototype);\r\n\r\nexport function match(...args) {\r\n  const obj = args[args.length - 1];\r\n\r\n  // Pre-compute matchers\r\n  const matchers = [];\r\n\r\n  for (const key in obj) {\r\n    matchers.push(when.unserialize(key, obj[key]));\r\n  }\r\n\r\n  // Since JS objects are unordered we need to reorder what for..in give us even if the order was already right\r\n  // because it depends on the JS engine implementation. See #2\r\n  matchers.sort((a, b) => {\r\n    return a.position < b.position ? -1 : 1;\r\n  });\r\n\r\n  // noinspection TypeScriptValidateTypes\r\n  if (Object.getOwnPropertySymbols(obj).indexOf(_catchAllSymbol) !== -1) {\r\n    matchers.push(when.unserialize(_catchAllSymbol, obj[_catchAllSymbol]));\r\n  }\r\n\r\n  const calculateResult = function(input) {\r\n    const matched = matchers.find(matcher => matcher.match(input));\r\n\r\n    if (!matched) {\r\n      throw new MissingCatchAllPattern();\r\n    }\r\n\r\n    return typeof matched.result === \"function\"\r\n      ? matched.result(input)\r\n      : matched.result;\r\n  };\r\n\r\n  return args.length === 2 ? calculateResult(args[0]) : calculateResult;\r\n}\r\n\r\nexport function when(props) {\r\n  if (props === undefined) {\r\n    return _catchAllSymbol;\r\n  }\r\n\r\n  if (props instanceof RegExp) {\r\n    return _serialize([_patternREGEXP.toString(), props.toString()]);\r\n  }\r\n\r\n  return _serialize(props);\r\n}\r\n\r\nwhen.__uid = 0;\r\n\r\n// Any -> String\r\nfunction _serialize(mixed) {\r\n  return JSON.stringify([when.__uid++, mixed]);\r\n}\r\n\r\n// String -> [Number, Any]\r\nfunction _unserialize(str) {\r\n  return JSON.parse(str);\r\n}\r\n\r\nfunction _true() {\r\n  return true;\r\n}\r\n\r\n// Any -> String\r\nfunction _match(props) {\r\n  if (Array.isArray(props)) {\r\n    if (props[0] === _patternORStr) {\r\n      props.shift();\r\n      return function(input) {\r\n        return props[0].some(prop => _matching(prop, input));\r\n      };\r\n    }\r\n\r\n    if (props[0] === _patternANDStr) {\r\n      props.shift();\r\n      return function(input) {\r\n        return props[0].every(prop => _matching(prop, input));\r\n      };\r\n    }\r\n\r\n    if (props[0] === _patternRANGEStr) {\r\n      props.shift();\r\n      return function(input) {\r\n        return props[0] <= input && input <= props[1];\r\n      };\r\n    }\r\n\r\n    if (props[0] === _patternREGEXPStr) {\r\n      const res = EXTRACT_PATTERN_AND_FLAGS.exec(props[1]);\r\n      return _matching.bind(null, new RegExp(res[1], res[2]));\r\n    }\r\n  }\r\n\r\n  function _matching(props, input) {\r\n    // Implement array matching\r\n    if (Array.isArray(input)) {\r\n      // @todo yes this is a quick and dirty way, optimize this\r\n      return JSON.stringify(props) === JSON.stringify(input);\r\n    }\r\n\r\n    if (props instanceof RegExp) {\r\n      return props.test(input);\r\n    }\r\n\r\n    if (typeof input === \"object\") {\r\n      for (const prop in props) {\r\n        if (input[prop] !== props[prop]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return props === input;\r\n  }\r\n\r\n  return input => _matching(props, input);\r\n}\r\n\r\n// Mixed -> String\r\nwhen.or = function(...args) {\r\n  return _serialize([_patternOR.toString(), args]);\r\n};\r\n\r\n// Mixed -> String\r\n// upcoming...\r\nwhen.and = function(...args) {\r\n  return _serialize([_patternAND.toString(), args]);\r\n};\r\n\r\nwhen.range = function(start, end) {\r\n  return _serialize([_patternRANGE.toString(), start, end]);\r\n};\r\n\r\nwhen.unserialize = function(serializedKey, value) {\r\n  if (serializedKey === _catchAllSymbol) {\r\n    return {\r\n      match: _true,\r\n      result: value,\r\n      position: Infinity\r\n    };\r\n  }\r\n\r\n  // Const {position, matcherConfiguration} = _unserialize(serializedKey);\r\n  const deserialized = _unserialize(serializedKey);\r\n  const matcherConfiguration = deserialized[1];\r\n  const position = deserialized[0];\r\n\r\n  return {\r\n    match: _match(matcherConfiguration),\r\n    result: value,\r\n    position\r\n  };\r\n};\r\n","import { match, when } from '../utils/match'\r\nimport { EventEmitter } from 'pietile-eventemitter'\r\nimport connect from 'mqtt/lib/connect'\r\nimport { atom, Atom, Derivable } from 'derivable'\r\nimport { IClientPublishOptions, MqttClient } from 'mqtt'\r\nimport { Callback, IQMessage, IQMessageAdapter, Subscription } from '../defs'\r\nimport { QMessage } from './message'\r\n\r\nconst reNewMessage = /^([\\w]+)\\/c/i;\r\nconst reNotification = /^([\\w]+)\\/n/i;\r\nconst reTyping = /^r\\/([\\d]+)\\/([\\d]+)\\/([\\S]+)\\/t$/i;\r\nconst reDelivery = /^r\\/([\\d]+)\\/([\\d]+)\\/([\\S]+)\\/d$/i;\r\nconst reRead = /^r\\/([\\d]+)\\/([\\d]+)\\/([\\S]+)\\/r$/i;\r\nconst reOnlineStatus = /^u\\/([\\S]+)\\/s$/i;\r\nconst reChannelMessage = /^([\\S]+)\\/([\\S]+)\\/c/i;\r\nconst reCustomEvent = /^r\\/[\\w]+\\/[\\w]+\\/e$/i;\r\n\r\nexport interface IQMqttAdapter {\r\n  connect(userId: string): void;\r\n  onMqttConnected(callback: () => void): Subscription;\r\n  onMqttReconnecting(callback: () => void): Subscription;\r\n  onMqttDisconnected(callback: () => void): Subscription;\r\n  onNewMessage(callback: Callback<IQMessage>): Subscription;\r\n  onMessageDelivered(callback: Callback<any>): Subscription;\r\n  onMessageRead(callback: Callback<any>): Subscription;\r\n  onUserTyping(\r\n    callback: (userId: string, roomId: number, isTyping: boolean) => void\r\n  ): Subscription;\r\n  onUserPresence(\r\n    callback: (userId: string, isOnline: boolean, lastSeen: Date) => void\r\n  ): Subscription;\r\n  onNewChannelMessage(callback: Callback<any>): Subscription;\r\n  onMessageDeleted(callback: Callback<any>): Subscription;\r\n  onRoomDeleted(callback: Callback<any>): Subscription;\r\n  sendPresence(userId: string, isOnline: boolean): void;\r\n  sendTyping(roomId: number, userId: string, isTyping: boolean): void;\r\n  publishCustomEvent(roomId: number, userId: string, data: any): void;\r\n  subscribeCustomEvent(roomId: number, callback: Callback<any>): void;\r\n  unsubscribeCustomEvent(roomId: number): void;\r\n  subscribeUser(userToken: string): Subscription;\r\n  subscribeUserPresence(userId: string): void;\r\n  unsubscribeUserPresence(userId: string): void;\r\n  subscribeRoom(roomId: number): void;\r\n  unsubscribeRoom(roomId: number): void;\r\n  subscribeChannel(appId: string, channelUniqueId: string): void;\r\n  unsubscribeChannel(appId: string, channelUniqueId: string): void;\r\n  readonly mqtt: any;\r\n}\r\n\r\nexport type MqttMessage = {\r\n  id: number;\r\n  comment_before_id: number;\r\n  message: string;\r\n  username: string;\r\n  email: string;\r\n  user_avatar: string;\r\n  timestamp: Date;\r\n  unix_timestamp: number;\r\n  created_at: Date;\r\n  room_id: number;\r\n  room_name: string;\r\n  topic_id: number;\r\n  unique_temp_id: string;\r\n  disable_link_preview: boolean;\r\n  chat_type: string;\r\n  comment_before_id_str: string;\r\n  extras: object;\r\n  is_public_channel: boolean;\r\n  payload: object;\r\n  raw_room_name: string;\r\n  room_avatar: string;\r\n  room_id_str: string;\r\n  room_options: string;\r\n  room_type: string;\r\n  status: string;\r\n  topic_id_str: string;\r\n  type: string;\r\n  unix_nano_timestamp: number;\r\n  user_avatar_url: string;\r\n  user_id: number;\r\n  user_id_str: string;\r\n};\r\nexport type MqttNotification = {\r\n  id: number;\r\n  timestamp: number;\r\n  action_topic: string;\r\n  payload: {\r\n    actor: {\r\n      id: string;\r\n      email: string;\r\n      name: string;\r\n    };\r\n    data: {\r\n      deleted_messages: [\r\n        {\r\n          message_unique_ids: string[];\r\n          room_id: string;\r\n        }\r\n      ];\r\n      is_hard_delete: boolean;\r\n      deleted_rooms: [\r\n        {\r\n          avatar_url: string;\r\n          chat_type: string;\r\n          id: number;\r\n          id_str: string;\r\n          options: object;\r\n          raw_room_name: string;\r\n          room_name: string;\r\n          unique_id: string;\r\n          last_comment: object;\r\n        }\r\n      ];\r\n    };\r\n  };\r\n};\r\nexport type MqttMessageReceived = {\r\n  message: MqttMessage;\r\n};\r\nexport type MqttMessageDelivery = {\r\n  roomId: number;\r\n  userId: string;\r\n  messageId: number;\r\n  messageUniqueId: string;\r\n};\r\nexport type MqttUserPresence = {\r\n  userId: string;\r\n  isOnline: boolean;\r\n  lastSeen: Date;\r\n};\r\nexport type MqttUserTyping = {\r\n  isTyping: boolean;\r\n  userId: string;\r\n  roomId: number;\r\n};\r\nexport type MqttCustomEvent = { roomId: number; payload: any };\r\ninterface Events {\r\n  \"message::received\": (message: MqttMessageReceived) => void;\r\n  \"message::delivered\": (message: MqttMessageDelivery) => void;\r\n  \"message::read\": (message: MqttMessageDelivery) => void;\r\n  \"message::deleted\": (data: { roomId: number; uniqueId: string }) => void;\r\n  \"room::cleared\": (roomId: number) => void;\r\n  \"user::typing\": (data: MqttUserTyping) => void;\r\n  \"user::presence\": (data: MqttUserPresence) => void;\r\n  \"channel-message::new\": (\r\n    message: MqttMessageReceived & { channelUniqueId: string }\r\n  ) => void;\r\n  \"custom-event\": (payload: any) => void;\r\n  \"mqtt::connected\": () => void;\r\n  \"mqtt::disconnected\": () => void;\r\n  \"mqtt::reconnecting\": () => void;\r\n}\r\ninterface MQTTHandler {\r\n  (topic: string): (data: any) => void;\r\n}\r\ninterface IQMqttHandler {\r\n  newMessage: MQTTHandler;\r\n  notificationHandler: MQTTHandler;\r\n  typingHandler: MQTTHandler;\r\n  deliveredHandler: MQTTHandler;\r\n  readHandler: MQTTHandler;\r\n  onlineHandler: MQTTHandler;\r\n  channelMessageHandler: MQTTHandler;\r\n  customEventHandler: MQTTHandler;\r\n}\r\n\r\nconst getMqttHandler = (emitter: EventEmitter<Events>): IQMqttHandler => {\r\n  return {\r\n    channelMessageHandler: topic => data => {\r\n      const topicData = reChannelMessage.exec(topic);\r\n      const channelUniqueId = topicData[2];\r\n      const message = JSON.parse(data);\r\n      emitter.emit(\"channel-message::new\", { channelUniqueId, message });\r\n    },\r\n    customEventHandler: topic => data => {\r\n      const topicData = reCustomEvent.exec(topic);\r\n      const roomId = topicData[1];\r\n      const payload = JSON.parse(data);\r\n      emitter.emit(\"custom-event\", { roomId, payload });\r\n    },\r\n    notificationHandler: _ => (data: string) => {\r\n      const payload = JSON.parse(data) as MqttNotification;\r\n      if (payload.action_topic === \"delete_message\") {\r\n        const deletedMessagesData = payload.payload.data.deleted_messages;\r\n        deletedMessagesData.forEach(data => {\r\n          const roomId = parseInt(data.room_id, 10);\r\n          data.message_unique_ids.forEach(uniqueId => {\r\n            emitter.emit(\"message::deleted\", { roomId, uniqueId });\r\n          });\r\n        });\r\n      }\r\n      if (payload.action_topic === \"clear_room\") {\r\n        console.log(\"got another notification\", data);\r\n        const clearedRooms = payload.payload.data.deleted_rooms;\r\n        clearedRooms.forEach(room => {\r\n          const roomId = room.id;\r\n          emitter.emit(\"room::cleared\", roomId);\r\n        });\r\n      }\r\n    },\r\n    onlineHandler: topic => data => {\r\n      const topicData = reOnlineStatus.exec(topic);\r\n      const payload = data.split(\":\");\r\n      const userId = topicData[1];\r\n      const isOnline = Number(payload[0]) === 1;\r\n      const lastSeen = new Date(Number(payload[1]));\r\n      emitter.emit(\"user::presence\", { userId, isOnline, lastSeen });\r\n    },\r\n    deliveredHandler: topic => data => {\r\n      const topicData = reDelivery.exec(topic);\r\n      const payload = data.split(\":\");\r\n      const roomId = parseInt(topicData[1], 10);\r\n      const userId = topicData[3];\r\n      const messageId = payload[0];\r\n      const messageUniqueId = payload[1];\r\n      emitter.emit(\"message::delivered\", {\r\n        roomId,\r\n        userId,\r\n        messageId,\r\n        messageUniqueId\r\n      });\r\n    },\r\n    newMessage: _ => data => {\r\n      const message: MqttMessage = JSON.parse(data);\r\n      emitter.emit(\"message::received\", { message });\r\n    },\r\n    readHandler: topic => data => {\r\n      const topicData = reRead.exec(topic);\r\n      const roomId = parseInt(topicData[1], 10);\r\n      const userId = topicData[3];\r\n      const payload = data.split(\":\");\r\n      const messageId = payload[0];\r\n      const messageUniqueId = payload[1];\r\n      emitter.emit(\"message::read\", {\r\n        roomId,\r\n        userId,\r\n        messageId,\r\n        messageUniqueId\r\n      });\r\n    },\r\n    typingHandler: topic => data => {\r\n      const topicData = reTyping.exec(topic);\r\n      const roomId = parseInt(topicData[1], 10);\r\n      const userId = topicData[3];\r\n      const isTyping = Number(data) === 1;\r\n      emitter.emit(\"user::typing\", { roomId, userId, isTyping });\r\n    }\r\n  };\r\n};\r\n\r\nexport default function getMqttAdapter(\r\n  message: Derivable<IQMessageAdapter>,\r\n  brokerUrl: Derivable<string>\r\n): IQMqttAdapter {\r\n  const emitter = new EventEmitter<Events>();\r\n  const handler = getMqttHandler(emitter);\r\n  const subscribedCustomEventTopics = new Map<number, any>();\r\n  const getTopic = (roomId: number) => `r/${roomId}/${roomId}/e`;\r\n  const logger = (...args: any[]) => console.log(\"MqttAdapter:\", ...args);\r\n  const matcher = match({\r\n    [when(reNewMessage)]: (topic: string) => handler.newMessage(topic),\r\n    [when(reNotification)]: (topic: string) =>\r\n      handler.notificationHandler(topic),\r\n    [when(reTyping)]: (topic: string) => handler.typingHandler(topic),\r\n    [when(reDelivery)]: (topic: string) => handler.deliveredHandler(topic),\r\n    [when(reRead)]: (topic: string) => handler.readHandler(topic),\r\n    [when(reOnlineStatus)]: (topic: string) => handler.onlineHandler(topic),\r\n    [when(reChannelMessage)]: (topic: string) =>\r\n      handler.channelMessageHandler(topic),\r\n    [when(reCustomEvent)]: (topic: string) => handler.customEventHandler(topic),\r\n    [when()]: (topic: string) => (message: any) =>\r\n      logger(\"topic not handled\", topic, message)\r\n  });\r\n  const mqtt: Atom<MqttClient | null> = atom(null);\r\n\r\n  emitter.on(\"custom-event\", (data: any) => {\r\n    const roomId = data.roomId;\r\n    if (subscribedCustomEventTopics.has(roomId)) {\r\n      const callback = subscribedCustomEventTopics.get(roomId);\r\n      callback(data.payload);\r\n    }\r\n  });\r\n\r\n  return {\r\n    get mqtt() {\r\n      return mqtt.get();\r\n    },\r\n    connect(userId: string): void {\r\n      const _mqtt = connect(\r\n        brokerUrl.get(),\r\n        {\r\n          will: {\r\n            topic: `u/${userId}/s`,\r\n            payload: 0,\r\n            retain: 0\r\n          }\r\n        }\r\n      );\r\n      mqtt.set(_mqtt);\r\n\r\n      _mqtt.on(\"message\", (topic: string, message: any) => {\r\n        message = message.toString();\r\n        const func = matcher(topic);\r\n        if (func != null) func(message);\r\n      });\r\n      _mqtt.on(\"connect\", () => {\r\n        emitter.emit(\"mqtt::connected\");\r\n      });\r\n      _mqtt.on(\"reconnect\", () => {\r\n        emitter.emit(\"mqtt::reconnecting\");\r\n      });\r\n      _mqtt.on(\"close\", () => {\r\n        emitter.emit(\"mqtt::disconnected\");\r\n      });\r\n    },\r\n    onMqttConnected(callback: () => void): () => void {\r\n      emitter.on(\"mqtt::connected\", callback);\r\n      return () => emitter.off(\"mqtt::connected\", callback);\r\n    },\r\n    onMqttReconnecting(callback: () => void): Subscription {\r\n      emitter.on(\"mqtt::reconnecting\", callback);\r\n      return () => emitter.off(\"mqtt::reconnecting\", callback);\r\n    },\r\n    onMqttDisconnected(callback: () => void): Subscription {\r\n      emitter.on(\"mqtt::disconnected\", callback);\r\n      return () => emitter.off(\"mqtt::disconnected\", callback);\r\n    },\r\n    onMessageDeleted(callback: (data: any) => void): () => void {\r\n      emitter.on(\"message::deleted\", callback);\r\n      return () => emitter.off(\"message::deleted\", callback);\r\n    },\r\n    onMessageDelivered(callback: (data: any) => void): () => void {\r\n      emitter.on(\"message::delivered\", callback);\r\n      return () => emitter.off(\"message::delivered\", callback);\r\n    },\r\n    onMessageRead(\r\n      callback: (\r\n        roomId: number,\r\n        userId: string,\r\n        messageId: number,\r\n        messageUniqueId: string\r\n      ) => void\r\n    ): () => void {\r\n      const handler = (data: MqttMessageDelivery) => {\r\n        callback(\r\n          data.roomId,\r\n          data.userId,\r\n          data.messageId,\r\n          data.messageUniqueId\r\n        );\r\n      };\r\n      emitter.on(\"message::read\", handler);\r\n      return () => emitter.off(\"message::read\", handler);\r\n    },\r\n    onNewChannelMessage(callback: (data: any) => void): () => void {\r\n      emitter.on(\"channel-message::new\", callback);\r\n      return () => emitter.off(\"channel-message::new\", callback);\r\n    },\r\n    onNewMessage(callback: (data: IQMessage) => void): () => void {\r\n      const handler = (data: MqttMessageReceived) => {\r\n        callback(QMessage.fromJson(data.message));\r\n      };\r\n      emitter.on(\"message::received\", handler);\r\n      return () => emitter.off(\"message::received\", handler);\r\n    },\r\n    onRoomDeleted(callback: (data: number) => void): () => void {\r\n      emitter.on(\"room::cleared\", callback);\r\n      return () => emitter.off(\"room::cleared\", callback);\r\n    },\r\n    onUserPresence(\r\n      callback: (userId: string, isOnline: boolean, lastSeen: Date) => void\r\n    ): () => void {\r\n      const handler = (data: MqttUserPresence) => {\r\n        callback(data.userId, data.isOnline, data.lastSeen);\r\n      };\r\n      emitter.on(\"user::presence\", handler);\r\n      return () => emitter.off(\"user::presence\", handler);\r\n    },\r\n    onUserTyping(\r\n      callback: (userId: string, roomId: number, isTyping: boolean) => void\r\n    ): () => void {\r\n      const handler = (data: MqttUserTyping) => {\r\n        callback(data.userId, data.roomId, data.isTyping);\r\n      };\r\n      emitter.on(\"user::typing\", handler);\r\n      return () => emitter.off(\"user::typing\", handler);\r\n    },\r\n    publishCustomEvent(roomId: number, userId: string, data: any): void {\r\n      const payload = JSON.stringify({\r\n        sender: userId,\r\n        data: data\r\n      });\r\n      mqtt.get().publish(getTopic(roomId), payload);\r\n    },\r\n    subscribeCustomEvent(roomId: number, callback: Callback<any>): void {\r\n      const topic = getTopic(roomId);\r\n      if (subscribedCustomEventTopics.has(roomId)) return;\r\n\r\n      mqtt.get().subscribe(topic);\r\n      subscribedCustomEventTopics.set(roomId, callback);\r\n    },\r\n    unsubscribeCustomEvent(roomId: number): void {\r\n      const topic = getTopic(roomId);\r\n      if (!subscribedCustomEventTopics.has(roomId)) return;\r\n\r\n      mqtt.get().unsubscribe(topic);\r\n      subscribedCustomEventTopics.delete(roomId);\r\n    },\r\n    sendPresence(userId: string, isOnline: boolean): void {\r\n      const status = isOnline ? \"1\" : \"0\";\r\n      mqtt.get().publish(`u/${userId}/s`, status, {\r\n        retain: true\r\n      } as IClientPublishOptions);\r\n    },\r\n    sendTyping(roomId: number, userId: string, isTyping: boolean): void {\r\n      const payload = isTyping ? \"1\" : \"0\";\r\n      mqtt.get().publish(`r/${roomId}/${roomId}/${userId}/t`, payload);\r\n    },\r\n    subscribeUser(userToken: string): Subscription {\r\n      mqtt\r\n        .get()\r\n        .subscribe(`${userToken}/c`)\r\n        .subscribe(`${userToken}/n`);\r\n      return () =>\r\n        mqtt\r\n          .get()\r\n          .unsubscribe(`${userToken}/c`)\r\n          .unsubscribe(`${userToken}/n`);\r\n    },\r\n    subscribeUserPresence(userId: string): void {\r\n      mqtt.get().subscribe(`u/${userId}/s`);\r\n    },\r\n    unsubscribeUserPresence(userId: string): void {\r\n      mqtt.get().unsubscribe(`u/${userId}/s`);\r\n    },\r\n    subscribeRoom(roomId: number): void {\r\n      mqtt\r\n        .get()\r\n        .subscribe(`r/${roomId}/${roomId}/+/t`)\r\n        .subscribe(`r/${roomId}/${roomId}/+/d`)\r\n        .subscribe(`r/${roomId}/${roomId}/+/r`);\r\n    },\r\n    unsubscribeRoom(roomId: number): void {\r\n      mqtt\r\n        .get()\r\n        .unsubscribe(`r/${roomId}/${roomId}/+/t`)\r\n        .unsubscribe(`r/${roomId}/${roomId}/+/d`)\r\n        .unsubscribe(`r/${roomId}/${roomId}/+/r`);\r\n    },\r\n    subscribeChannel(appId: string, channelUniqueId: string): void {\r\n      mqtt.get().subscribe(`${appId}/${channelUniqueId}/c`);\r\n    },\r\n    unsubscribeChannel(appId: string, channelUniqueId: string): void {\r\n      mqtt.get().unsubscribe(`${appId}/${channelUniqueId}/c`);\r\n    }\r\n  };\r\n}\r\n","import xs, { Stream, Subscription } from 'xstream';\r\nimport { Subscription as Subs } from '../defs';\r\n\r\ntype Callback<T> = (value: T, error?: Error | null) => void;\r\nexport const toPromise = <T>(stream: Stream<T>): Promise<T> =>\r\n  new Promise((resolve, reject) => {\r\n    let value = null;\r\n    stream.subscribe({\r\n      next(data) {\r\n        value = data;\r\n      },\r\n      error(error) {\r\n        reject(error);\r\n      },\r\n      complete() {\r\n        resolve(value);\r\n      }\r\n    });\r\n  });\r\nexport const toCallback = <T>(callback: Callback<T>) => (stream: Stream<T>) => {\r\n  let value = null;\r\n  const subscription = stream.subscribe({\r\n    next(data) {\r\n      value = data;\r\n    },\r\n    error(error) {\r\n      callback(null, error);\r\n    },\r\n    complete() {\r\n      callback(value);\r\n      subscription.unsubscribe();\r\n    }\r\n  });\r\n};\r\nexport const toCallbackOrPromise = <T>(callback?: Callback<T> | null) => (\r\n  stream: Stream<T>\r\n) => {\r\n  if (callback == null) return toPromise(stream);\r\n  return toCallback(callback)(stream);\r\n};\r\n\r\nexport const tryCatch = <T>(\r\n  fn: () => T,\r\n  onError: (error: Error) => void\r\n): void => {\r\n  try {\r\n    fn();\r\n  } catch (error) {\r\n    onError(error);\r\n  }\r\n};\r\n\r\nexport const process = <T>(item: T, ...checkers: Function[]): Stream<T> =>\r\n  xs.create({\r\n    start(listener) {\r\n      checkers.forEach(check => {\r\n        tryCatch(\r\n          () => {\r\n            const value = check(item);\r\n            listener.next(value);\r\n            listener.complete();\r\n          },\r\n          error => listener.error(error)\r\n        );\r\n      });\r\n    },\r\n    stop() {}\r\n  });\r\n\r\nexport const tap = <T>(\r\n  onNext: (value: T) => void,\r\n  onError?: (error: Error) => void,\r\n  onComplete?: () => void\r\n) => (stream: Stream<T>): Stream<T> => {\r\n  let subscription: Subscription = null;\r\n  return xs.create<T>({\r\n    start(listener) {\r\n      subscription = stream.subscribe({\r\n        next(value) {\r\n          if (onNext != null) onNext(value);\r\n          listener.next(value);\r\n        },\r\n        error(error) {\r\n          if (onError != null) onError(error);\r\n          listener.error(error);\r\n        },\r\n        complete() {\r\n          if (onComplete != null) onComplete();\r\n          listener.complete();\r\n        }\r\n      });\r\n    },\r\n    stop() {\r\n      if (subscription != null) subscription.unsubscribe();\r\n    }\r\n  });\r\n};\r\n\r\nconst sleep = (time: number) =>\r\n  new Promise(resolve => setTimeout(resolve, time));\r\nexport const bufferUntil = <T>(fn: () => boolean) => (\r\n  stream: Stream<T>\r\n): Stream<T> => {\r\n  const buffer = [];\r\n  let subscription: Subscription;\r\n  return xs.create({\r\n    start(listener) {\r\n      subscription = stream.subscribe({\r\n        next: data => {\r\n          buffer.push(data);\r\n          while (fn() && buffer.length) {\r\n            const data = buffer.shift();\r\n            listener.next(data);\r\n          }\r\n        },\r\n        error: err => listener.error(err),\r\n        complete: async () => {\r\n          while (buffer.length) {\r\n            if (fn()) listener.next(buffer.shift());\r\n            await sleep(300);\r\n          }\r\n          listener.complete();\r\n        }\r\n      });\r\n    },\r\n    stop() {\r\n      subscription && subscription.unsubscribe();\r\n    }\r\n  });\r\n};\r\n\r\nexport const subscribeOnNext = <T extends any[]>(\r\n  onNext: (value: T) => void\r\n) => (stream: Stream<T>) => {\r\n  return stream.subscribe({\r\n    next: (data: T) => onNext(data)\r\n  });\r\n};\r\n\r\ntype Func<T extends any[]> = (...data: T) => void;\r\nexport const toEventSubscription = <T extends any[]>(\r\n  eventSubscribe: (handler: Func<T>) => Subs\r\n) => (stream: Stream<Func<T>>) => {\r\n  let subscription: Subscription = null;\r\n  let subs: Subs = null;\r\n  subscription = stream.subscribe({\r\n    next: handler => {\r\n      subs = eventSubscribe(handler);\r\n    }\r\n  });\r\n\r\n  return () => {\r\n    subscription.unsubscribe();\r\n    subs();\r\n  };\r\n};\r\n","import { atom, Derivable } from \"derivable\";\r\nimport { IQHttpAdapter } from \"./http\";\r\nimport getSyncAdapter from \"./sync\";\r\nimport {\r\n  Callback,\r\n  IQMessage,\r\n  IQRoom,\r\n  Subscription,\r\n  IQMessageAdapter,\r\n  IQRoomAdapter,\r\n  IQMessageType\r\n} from \"../defs\";\r\nimport xs from \"xstream\";\r\nimport getMqttAdapter, { IQMqttAdapter } from \"./mqtt\";\r\nimport { tap, subscribeOnNext } from \"../utils/stream\";\r\nimport { QMessage } from \"./message\";\r\n\r\nexport interface IQRealtimeAdapter {\r\n  onNewMessage(callback: Callback<IQMessage>): Subscription;\r\n  onMessageDelivered(callback: Callback<IQMessage>): Subscription;\r\n  onMessageRead(callback: Callback<IQMessage>): Subscription;\r\n  onMessageDeleted(callback: Callback<IQMessage>): Subscription;\r\n  onRoomCleared(callback: Callback<number>): Subscription;\r\n  onTyping(\r\n    callback: (userId: string, roomId: number, isTyping: boolean) => void\r\n  ): Subscription;\r\n  onPresence(callback: Callback<any>): Subscription;\r\n  synchronize(lastMessageId: number): void;\r\n  synchronizeEvent(lastEventId: number): void;\r\n  sendTyping(roomId: number, userId: string, isTyping: boolean): void;\r\n  sendPresence(userId: string, isOnline: boolean): void;\r\n  readonly mqtt: IQMqttAdapter;\r\n}\r\n\r\nexport type SyncMethod<T extends any[]> = (\r\n  callback: (...data: T) => void\r\n) => Subscription;\r\nfunction fromSync<T extends any[]>(method: SyncMethod<T>) {\r\n  let subscription: Subscription = null;\r\n  return xs.create<T>({\r\n    start(listener) {\r\n      subscription = method((...data) => {\r\n        listener.next([...data] as T);\r\n      });\r\n    },\r\n    stop() {\r\n      subscription();\r\n    }\r\n  });\r\n}\r\n\r\nexport default function getRealtimeAdapter(\r\n  http: Derivable<IQHttpAdapter>,\r\n  messageAdapter: Derivable<IQMessageAdapter>,\r\n  roomAdapter: Derivable<IQRoomAdapter>,\r\n  syncInterval: Derivable<number>,\r\n  brokerUrl: Derivable<string>,\r\n  shouldSync: Derivable<boolean>,\r\n  isLogin: Derivable<boolean>,\r\n  token: Derivable<string>\r\n): IQRealtimeAdapter {\r\n  const isMqttConnected = atom(false);\r\n  const sync = getSyncAdapter(http, messageAdapter, roomAdapter, token);\r\n  const mqtt = getMqttAdapter(messageAdapter, brokerUrl);\r\n\r\n  xs.periodic(syncInterval.get())\r\n    .filter(() => isLogin.get())\r\n    .filter(() => !isMqttConnected.get() || shouldSync.get())\r\n    .subscribe({\r\n      next() {\r\n        sync.synchronize();\r\n        sync.synchronizeEvent();\r\n      }\r\n    });\r\n\r\n  mqtt.onMqttConnected(() => isMqttConnected.set(true));\r\n\r\n  return {\r\n    get mqtt() {\r\n      return mqtt;\r\n    },\r\n    onMessageDeleted(callback: Callback<IQMessage>): Subscription {\r\n      const subscription = xs\r\n        .merge(fromSync(sync.onMessageDeleted), fromSync(mqtt.onMessageDeleted))\r\n        .compose(subscribeOnNext(([message]) => callback(message)));\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onMessageDelivered(callback: Callback<IQMessage>): Subscription {\r\n      const subscription = xs\r\n        .merge(\r\n          fromSync(sync.onMessageDelivered),\r\n          fromSync(mqtt.onMessageDelivered)\r\n        )\r\n        .compose(\r\n          subscribeOnNext(([roomId, userId, messageId, messageUniqueId]) => {\r\n            const message = QMessage.prepareNew(\r\n              userId,\r\n              roomId,\r\n              null,\r\n              IQMessageType.Text,\r\n              null,\r\n              null\r\n            );\r\n            message.id = messageId;\r\n            message.uniqueId = messageUniqueId;\r\n            callback(message);\r\n          })\r\n        );\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onMessageRead(callback: Callback<IQMessage>): Subscription {\r\n      const subscription = xs\r\n        .merge(fromSync(sync.onMessageRead), fromSync(mqtt.onMessageRead))\r\n        .compose(\r\n          subscribeOnNext(([roomId, userId, messageId, messageUniqueId]) => {\r\n            const message = QMessage.prepareNew(\r\n              userId,\r\n              roomId,\r\n              null,\r\n              IQMessageType.Text,\r\n              null,\r\n              null\r\n            );\r\n            message.id = messageId;\r\n            message.uniqueId = messageUniqueId;\r\n            callback(message);\r\n          })\r\n        );\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onNewMessage(callback: Callback<IQMessage>): Subscription {\r\n      const subscription = xs\r\n        .merge(fromSync(sync.onNewMessage), fromSync(mqtt.onNewMessage))\r\n        .compose(\r\n          tap(([message]) => {\r\n            messageAdapter\r\n              .get()\r\n              .markAsDelivered(message.roomId, message.id)\r\n              .catch(_ => {});\r\n          })\r\n        )\r\n        .compose(subscribeOnNext(([message]) => callback(message)));\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onPresence(\r\n      callback: (userId: string, isOnline: boolean, lastSeen: Date) => void\r\n    ): Subscription {\r\n      const subscription = fromSync(mqtt.onUserPresence).compose(\r\n        subscribeOnNext(([userId, isOnline, lastSeen]) =>\r\n          callback(userId, isOnline, lastSeen)\r\n        )\r\n      );\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onRoomCleared(callback: Callback<number>): Subscription {\r\n      const subscription = fromSync(sync.onRoomCleared).compose(\r\n        subscribeOnNext(([room]) => callback(room.id))\r\n      );\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    onTyping(\r\n      callback: (userId: string, roomId: number, isTyping: boolean) => void\r\n    ): Subscription {\r\n      const subscription = fromSync(mqtt.onUserTyping).compose(\r\n        subscribeOnNext(([userId, roomId, isTyping]) =>\r\n          callback(userId, roomId, isTyping)\r\n        )\r\n      );\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    sendPresence(userId: string, isOnline: boolean): void {\r\n      mqtt.sendPresence(userId, isOnline);\r\n    },\r\n    sendTyping(roomId: number, userId: string, isTyping: boolean): void {\r\n      mqtt.sendTyping(roomId, userId, isTyping);\r\n    },\r\n    synchronize(lastMessageId: number): void {\r\n      sync.synchronize(lastMessageId);\r\n    },\r\n    synchronizeEvent(lastEventId: number): void {\r\n      sync.synchronizeEvent(lastEventId);\r\n    }\r\n  };\r\n}\r\n","import { atom, Atom, lens } from 'derivable'\r\nimport { IQHttpAdapter } from './http'\r\nimport QUrlBuilder from '../utils/url-builder'\r\nimport {\r\n  IQParticipant,\r\n  IQRoom,\r\n  IQRoomAdapter,\r\n  IQRoomType,\r\n  IQUserAdapter\r\n} from '../defs'\r\n\r\nexport class QParticipant implements IQParticipant {\r\n  id: number;\r\n  avatarUrl: string;\r\n  displayName: string;\r\n  lastReadMessageId: number;\r\n  lastReceivedMessageId: number;\r\n  userId: string;\r\n\r\n  updateFromJson(json: GetParticipantResponse.Participant): IQParticipant {\r\n    this.id = json.id;\r\n    this.avatarUrl = json.avatar_url;\r\n    this.displayName = json.username;\r\n    this.lastReadMessageId = json.last_comment_read_id;\r\n    this.lastReceivedMessageId = json.last_comment_received_id;\r\n    this.userId = json.email;\r\n    return this;\r\n  }\r\n\r\n  static fromJson(json: GetParticipantResponse.Participant): IQParticipant {\r\n    return new QParticipant().updateFromJson(json);\r\n  }\r\n}\r\n\r\ninterface QRoomJson {\r\n  id: number;\r\n  unique_id: string;\r\n  room_name: string;\r\n  avatar_url: string;\r\n  is_public_channel: boolean;\r\n  last_comment_message: string;\r\n  last_comment_id: number;\r\n  unread_count: number;\r\n  participants: object[];\r\n  room_total_participants: number;\r\n  options: string;\r\n  chat_type: string;\r\n}\r\n\r\nexport class QRoom implements IQRoom {\r\n  avatarUrl: string;\r\n  isChannel: boolean;\r\n  lastMessageContent?: string;\r\n  lastMessageId?: number;\r\n  type: IQRoomType;\r\n  uniqueId: string;\r\n  unreadCount: number;\r\n  id: number;\r\n  name: string;\r\n  totalParticipants?: number;\r\n  participants?: IQParticipant[];\r\n  options?: string;\r\n\r\n  updateFromJson(json: QRoomJson): IQRoom {\r\n    this.avatarUrl = json.avatar_url;\r\n    this.isChannel = json.is_public_channel;\r\n    this.id = json.id;\r\n    this.lastMessageContent = json.last_comment_message;\r\n    this.lastMessageId = json.last_comment_id;\r\n    this.name = json.room_name;\r\n    this.uniqueId = json.unique_id;\r\n    this.unreadCount = json.unread_count;\r\n    if (json.participants != null) {\r\n      this.participants = json.participants.map((it: any) =>\r\n        QParticipant.fromJson(it)\r\n      );\r\n    }\r\n    if (json.room_total_participants != null) {\r\n      this.totalParticipants = json.room_total_participants;\r\n    }\r\n    if (json.options != null) this.options = json.options;\r\n    if (json.chat_type === \"single\") this.type = IQRoomType.Single;\r\n    if (json.chat_type === \"group\") this.type = IQRoomType.Group;\r\n\r\n    return this;\r\n  }\r\n  static fromJson(json: QRoomJson): IQRoom {\r\n    return new QRoom().updateFromJson(json);\r\n  }\r\n\r\n  static emptyRoom() {\r\n    return QRoom.fromJson({\r\n      avatar_url: \"\",\r\n      is_public_channel: false,\r\n      id: -1,\r\n      last_comment_id: -1,\r\n      last_comment_message: \"\",\r\n      room_name: \"\",\r\n      unique_id: \"\",\r\n      unread_count: -1,\r\n      participants: [],\r\n      chat_type: \"\",\r\n      options: \"{}\",\r\n      room_total_participants: -1\r\n    });\r\n  }\r\n}\r\n\r\nexport default function getRoomAdapter(\r\n  http: Atom<IQHttpAdapter>,\r\n  user: Atom<IQUserAdapter>\r\n): IQRoomAdapter {\r\n  const rooms = atom<{ [key: string]: IQRoom }>({});\r\n  const getRoomDataWithId = (roomId: number) =>\r\n    lens<IQRoom>({\r\n      get() {\r\n        return rooms.get()[roomId];\r\n      },\r\n      set(room) {\r\n        rooms.update(rooms => {\r\n          if (room != null) rooms[room.id] = room;\r\n          return rooms;\r\n        });\r\n      }\r\n    });\r\n  const getRoomDataWithUniqueId = (roomUniqueId: string) =>\r\n    lens<IQRoom>({\r\n      get() {\r\n        return Object.values(rooms.get()).find(\r\n          it => it.uniqueId === roomUniqueId\r\n        );\r\n      },\r\n      set(room) {\r\n        rooms.update(rooms => {\r\n          if (room != null) rooms[room.id] = room;\r\n          return rooms;\r\n        });\r\n      }\r\n    });\r\n  return {\r\n    get rooms() {\r\n      return rooms;\r\n    },\r\n    get getRoomDataWithId() {\r\n      return getRoomDataWithId;\r\n    },\r\n    get getRoomDataWithUniqueId() {\r\n      return getRoomDataWithUniqueId;\r\n    },\r\n    async addParticipants(\r\n      roomId: number,\r\n      participantIds: string[]\r\n    ): Promise<IQParticipant[]> {\r\n      const data = new FormData();\r\n      data.append(\"token\", user.get().token.get());\r\n      data.append(\"room_id\", String(roomId));\r\n      participantIds.forEach(id => data.append(\"emails[]\", id));\r\n      const resp = await http\r\n        .get()\r\n        .postFormData<AddParticipantsResponse.RootObject>(\r\n          \"add_room_participants\",\r\n          data\r\n        );\r\n      const participants = resp.results.participants_added.map(\r\n        QParticipant.fromJson\r\n      );\r\n\r\n      getRoomDataWithId(roomId).update(room => {\r\n        if (room == null) return room;\r\n        room.participants = [...room.participants, ...participants];\r\n        room.totalParticipants = room.participants.length;\r\n        return room;\r\n      });\r\n\r\n      return participants;\r\n    },\r\n    async removeParticipants(\r\n      roomId: number,\r\n      participantIds: string[]\r\n    ): Promise<IQParticipant[]> {\r\n      const data = new FormData();\r\n      data.append(\"token\", user.get().token.get());\r\n      data.append(\"room_id\", String(roomId));\r\n      participantIds.forEach(id => data.append(\"emails[]\", id));\r\n      const resp = await http\r\n        .get()\r\n        .postFormData<RemoveParticipantResponse.RootObject>(\r\n          \"remove_room_participants\",\r\n          data\r\n        );\r\n      const removedIds = resp.results.participants_removed;\r\n\r\n      const roomLens = getRoomDataWithId(roomId);\r\n      const room = roomLens.get();\r\n      if (room != null) {\r\n        const participants = removedIds\r\n          .map(id => {\r\n            return room.participants.find(it => it.userId === id);\r\n          })\r\n          .filter(it => it != null);\r\n        roomLens.update(room => {\r\n          if (room == null) return room;\r\n          room.participants = room.participants.filter(it =>\r\n            removedIds.includes(it.userId)\r\n          );\r\n          room.totalParticipants = room.participants.length;\r\n          return room;\r\n        });\r\n        return participants;\r\n      } else {\r\n        return removedIds.map(id => {\r\n          const p = new QParticipant();\r\n          p.userId = id;\r\n          return p;\r\n        });\r\n      }\r\n    },\r\n    async chatUser(\r\n      userId: string,\r\n      extras?: string\r\n    ): Promise<IQRoom> {\r\n      const resp = await http\r\n        .get()\r\n        .post<ChatUserResponse.RootObject>(\"get_or_create_room_with_target\", {\r\n          token: user.get().token.get(),\r\n          emails: [userId],\r\n          options: extras\r\n        });\r\n      const room = QRoom.fromJson(resp.results.room);\r\n      getRoomDataWithId(room.id).update(it => ({ ...it, ...room }));\r\n      return room;\r\n    },\r\n    async clearRoom(roomUniqueIds: string[]): Promise<IQRoom[]> {\r\n      const url = QUrlBuilder(\"clear_room_messages\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"room_channel_ids\", roomUniqueIds)\r\n        .build();\r\n      const resp = await http.get().delete<ClearRoomResponse.RootObject>(url);\r\n      // TODO: Clear message related to this room unique id\r\n      return resp.results.rooms.map((room: any) => QRoom.fromJson(room));\r\n    },\r\n    async createGroup(\r\n      name: string,\r\n      userIds: string[],\r\n      avatarUrl?: string,\r\n      extras?: string\r\n    ): Promise<IQRoom> {\r\n      const resp = await http\r\n        .get()\r\n        .post<CreateRoomResponse.RootObject>(\"create_room\", {\r\n          token: user.get().token.get(),\r\n          name: name,\r\n          participants: userIds,\r\n          avatar_url: avatarUrl,\r\n          options: extras\r\n        });\r\n      const room = QRoom.fromJson(resp.results.room);\r\n\r\n      getRoomDataWithId(room.id).set(room);\r\n\r\n      return room;\r\n    },\r\n    async getChannel(\r\n      uniqueId: string,\r\n      name?: string,\r\n      avatarUrl?: string,\r\n      extras?: string\r\n    ): Promise<IQRoom> {\r\n      const resp = await http\r\n        .get()\r\n        .post<GetChannelResponse.RootObject>(\r\n          \"get_or_create_room_with_unique_id\",\r\n          {\r\n            token: user.get().token.get(),\r\n            unique_id: uniqueId,\r\n            name: name,\r\n            avatar_url: avatarUrl,\r\n            options: extras\r\n          }\r\n        );\r\n      const room = QRoom.fromJson(resp.results.room);\r\n      getRoomDataWithId(room.id).set(room);\r\n      return room;\r\n    },\r\n    async getParticipantList(\r\n      roomUniqueId: string,\r\n      offset?: number | null,\r\n      sorting?: \"asc\" | \"desc\" | null\r\n    ): Promise<IQParticipant[]> {\r\n      const url = QUrlBuilder(\"room_participants\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"offset\", offset)\r\n        .param(\"room_unique_id\", roomUniqueId)\r\n        .param('sorting', sorting)\r\n        .build();\r\n      const resp = await http.get().get<GetParticipantResponse.RootObject>(url);\r\n      const participants = resp.results.participants.map(participant =>\r\n        QParticipant.fromJson(participant)\r\n      );\r\n\r\n      // getRoomDataWithId(resp.results).update(room => {\r\n      //   room.participants = participants;\r\n      //   room.totalParticipants = room.participants.length;\r\n      //   return room;\r\n      // });\r\n\r\n      return participants;\r\n    },\r\n    async getRoom(roomId: number): Promise<IQRoom> {\r\n      const url = QUrlBuilder(\"get_room_by_id\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"id\", roomId)\r\n        .build();\r\n      const resp = await http.get().get<GetRoomResponse.RootObject>(url);\r\n      const room = QRoom.fromJson(resp.results.room);\r\n      getRoomDataWithId(roomId).set(room);\r\n      return room;\r\n    },\r\n    async getRoomInfo(\r\n      roomIds?: number[],\r\n      uniqueIds?: string[],\r\n      page?: number,\r\n      showRemoved: boolean = false,\r\n      showParticipant: boolean = false\r\n    ): Promise<IQRoom[]> {\r\n      const data = new FormData();\r\n      data.append(\"token\", user.get().token.get());\r\n      data.append(\"show_participants\", String(showParticipant));\r\n      data.append(\"show_removed\", String(showRemoved));\r\n      if (roomIds != null && roomIds.length > 0)\r\n        roomIds.forEach(id => data.append(\"room_id[]\", String(id)));\r\n      if (uniqueIds != null && uniqueIds.length > 0)\r\n        uniqueIds.forEach(id => data.append(\"room_unique_id[]\", id));\r\n\r\n      const resp = await http\r\n        .get()\r\n        .postFormData<GetRoomInfoResponse.RootObject>(\"rooms_info\", data);\r\n      const _rooms = resp.results.rooms_info.map(room =>\r\n        QRoom.fromJson({\r\n          ...room,\r\n          last_comment_id: room.last_comment.id,\r\n          last_comment_id_str: room.last_comment.id_str,\r\n          last_topic_id: room.last_comment.topic_id,\r\n          last_topic_id_str: room.last_comment.topic_id_str,\r\n          last_comment_message: room.last_comment.message\r\n        } as ChatUserResponse.Room)\r\n      );\r\n\r\n      rooms.update(rooms => {\r\n        _rooms.forEach(room => (rooms[room.id] = room));\r\n        return rooms;\r\n      });\r\n\r\n      return _rooms;\r\n    },\r\n    async getRoomList(\r\n      showParticipant?: boolean,\r\n      showRemoved?: boolean,\r\n      showEmpty?: boolean,\r\n      page?: number,\r\n      limit?: number\r\n    ): Promise<IQRoom[]> {\r\n      const url = QUrlBuilder(\"user_rooms\")\r\n        .param(\"token\", user.get().token.get())\r\n        .param(\"page\", page)\r\n        .param(\"limit\", limit)\r\n        .param(\"show_participants\", showParticipant)\r\n        .param(\"show_removed\", showRemoved)\r\n        .param(\"show_empty\", showEmpty)\r\n        .build();\r\n      const resp = await http.get().get<GetRoomListResponse.RootObject>(url);\r\n      const _rooms = resp.results.rooms_info.map(it =>\r\n        QRoom.fromJson({\r\n          ...it,\r\n          last_comment_message: it.last_comment.message,\r\n          last_comment_id: it.last_comment.id\r\n        } as QRoomJson)\r\n      );\r\n      rooms.update(rooms => {\r\n        const rs = _rooms.reduce<{ [key: string]: IQRoom }>((res, room) => {\r\n          res[room.id] = room;\r\n          return res;\r\n        }, {});\r\n        return {\r\n          ...rooms,\r\n          ...rs\r\n        };\r\n      });\r\n      return _rooms;\r\n    },\r\n    async getUnreadCount(): Promise<number> {\r\n      const url = QUrlBuilder(\"total_unread_count\")\r\n        .param(\"token\", user.get().token.get())\r\n        .build();\r\n      const resp = await http.get().get<GetUnreadResponse.RootObject>(url);\r\n      return resp.results.total_unread_count;\r\n    },\r\n    async updateRoom(\r\n      roomId: number,\r\n      name?: string | null,\r\n      avatarUrl?: string | null,\r\n      extras?: string | null\r\n    ): Promise<IQRoom> {\r\n      const data = new FormData();\r\n      data.append(\"token\", user.get().token.get());\r\n      data.append(\"id\", String(roomId));\r\n      if (name != null) {\r\n        data.append(\"room_name\", name);\r\n      }\r\n      if (avatarUrl != null) {\r\n        data.append(\"avatar_url\", avatarUrl);\r\n      }\r\n      if (extras != null) {\r\n        data.append(\"options\", extras);\r\n      }\r\n\r\n      const resp = await http\r\n        .get()\r\n        .postFormData<UpdateRoomResponse.RootObject>(\"update_room\", data);\r\n      const room = QRoom.fromJson(resp.results.room);\r\n      getRoomDataWithId(roomId).set(room);\r\n      return room;\r\n    }\r\n  };\r\n}\r\n\r\n//region Response Type\r\ndeclare module AddParticipantsResponse {\r\n  export interface Extras {}\r\n\r\n  export interface ParticipantsAdded {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    participants_added: ParticipantsAdded[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module ChatUserResponse {\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: object;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_comment_message: string;\r\n    last_topic_id: number;\r\n    last_topic_id_str: string;\r\n    options: string;\r\n    participants: Participant[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    comments: any[];\r\n    room: Room;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module ClearRoomResponse {\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    options: string;\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    unique_id: string;\r\n    last_comment?: any;\r\n  }\r\n\r\n  export interface Results {\r\n    rooms: Room[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module CreateRoomResponse {\r\n  export interface Extras {\r\n    role: string;\r\n  }\r\n\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_comment_message: string;\r\n    last_topic_id: number;\r\n    last_topic_id_str: string;\r\n    options: string;\r\n    participants: Participant[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    comments: any[];\r\n    room: Room;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetChannelResponse {\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_comment_message: string;\r\n    last_topic_id: number;\r\n    last_topic_id_str: string;\r\n    options: string;\r\n    participants: any[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    changed: boolean;\r\n    comments: any[];\r\n    room: Room;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetParticipantResponse {\r\n  export interface Meta {\r\n    current_offset: number;\r\n    per_page: number;\r\n    total: number;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    meta: Meta;\r\n    participants: Participant[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetRoomResponse {\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface Comment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: object;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: Payload;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: number;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Extras2 {\r\n    role: string;\r\n  }\r\n\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras2;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_comment_message: string;\r\n    last_topic_id: number;\r\n    last_topic_id_str: string;\r\n    options: string;\r\n    participants: Participant[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    comments: Comment[];\r\n    room: Room;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetRoomInfoResponse {\r\n  export interface Meta {\r\n    request_rooms_total: number;\r\n    response_rooms_total: number;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface LastComment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: Payload;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: number;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: object;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface RoomsInfo {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    is_removed: boolean;\r\n    last_comment: LastComment;\r\n    options: string;\r\n    participants: Participant[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    meta: Meta;\r\n    rooms_info: RoomsInfo[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetRoomListResponse {\r\n  export interface Meta {\r\n    current_page: number;\r\n    total_room: number;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface Payload {}\r\n\r\n  export interface Avatar {\r\n    url: string;\r\n  }\r\n\r\n  export interface UserAvatar {\r\n    avatar: Avatar;\r\n  }\r\n\r\n  export interface LastComment {\r\n    comment_before_id: number;\r\n    comment_before_id_str: string;\r\n    disable_link_preview: boolean;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    is_deleted: boolean;\r\n    is_public_channel: boolean;\r\n    message: string;\r\n    payload: Payload;\r\n    room_avatar: string;\r\n    room_id: number;\r\n    room_id_str: string;\r\n    room_name: string;\r\n    room_type: string;\r\n    status: string;\r\n    timestamp: Date;\r\n    topic_id: number;\r\n    topic_id_str: string;\r\n    type: string;\r\n    unique_temp_id: string;\r\n    unix_nano_timestamp: any;\r\n    unix_timestamp: number;\r\n    user_avatar: UserAvatar;\r\n    user_avatar_url: string;\r\n    user_id: number;\r\n    user_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface RoomsInfo {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    is_removed: boolean;\r\n    last_comment: LastComment;\r\n    options: string;\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    unique_id: string;\r\n    unread_count: number;\r\n    participants?: GetRoomInfoResponse.Participant[];\r\n    room_total_participants?: number;\r\n  }\r\n\r\n  export interface Results {\r\n    meta: Meta;\r\n    rooms_info: RoomsInfo[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module GetUnreadResponse {\r\n  export interface Results {\r\n    total_unread_count: number;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module RemoveParticipantResponse {\r\n  export interface Results {\r\n    participants_removed: string[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module UpdateRoomResponse {\r\n  export interface Extras {\r\n    role: string;\r\n  }\r\n\r\n  export interface Participant {\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_read_id: number;\r\n    last_comment_read_id_str: string;\r\n    last_comment_received_id: number;\r\n    last_comment_received_id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Room {\r\n    avatar_url: string;\r\n    chat_type: string;\r\n    id: number;\r\n    id_str: string;\r\n    is_public_channel: boolean;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_comment_message: string;\r\n    last_topic_id: number;\r\n    last_topic_id_str: string;\r\n    options: string;\r\n    participants: Participant[];\r\n    raw_room_name: string;\r\n    room_name: string;\r\n    room_total_participants: number;\r\n    unique_id: string;\r\n    unread_count: number;\r\n  }\r\n\r\n  export interface Results {\r\n    changed: boolean;\r\n    comments: any[];\r\n    room: Room;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\n//endregion\r\n","import { Atom, atom } from \"derivable\";\r\nimport { IQHttpAdapter } from \"./http\";\r\nimport QUrlBuilder from \"../utils/url-builder\";\r\nimport { IQUser, IQUserAdapter, IQUserExtraProps, QNonce } from \"../defs\";\r\n\r\nexport class QUser implements IQUser {\r\n  id: number;\r\n  userId: string;\r\n  displayName: string;\r\n  avatarUrl?: string;\r\n\r\n  static fromJson(json: {\r\n    id: number;\r\n    email: string;\r\n    username: string;\r\n    avatar_url: string;\r\n  }): IQUser {\r\n    const user = new QUser();\r\n    user.id = json.id;\r\n    user.userId = json.email;\r\n    user.displayName = json.username;\r\n    user.avatarUrl = json.avatar_url;\r\n    return user;\r\n  }\r\n}\r\n\r\ntype NonceResponse = {\r\n  status: number;\r\n  results: { expired_at: number; nonce: string };\r\n};\r\n\r\nexport default function getUserAdapter(\r\n  http: Atom<IQHttpAdapter>\r\n): IQUserAdapter {\r\n  const currentUser = atom<IQUser>(null);\r\n  const token = atom<string>(null);\r\n\r\n  return {\r\n    async login(\r\n      userId: string,\r\n      userKey: string,\r\n      { avatarUrl, extras, name }: IQUserExtraProps\r\n    ): Promise<IQUser> {\r\n      const data = {\r\n        email: userId,\r\n        password: userKey,\r\n        avatar_url: avatarUrl,\r\n        username: name,\r\n        extras: extras\r\n      };\r\n      const resp = await http\r\n        .get()\r\n        .post<UserResponse.RootObject>(\"login_or_register\", data);\r\n      const user = QUser.fromJson(resp.results.user);\r\n\r\n      currentUser.set(user);\r\n      token.set(resp.results.user.token);\r\n\r\n      return user;\r\n    },\r\n    clear() {\r\n      currentUser.set(null);\r\n      token.set(null);\r\n    },\r\n    async blockUser(userId: string): Promise<IQUser> {\r\n      const resp = await http\r\n        .get()\r\n        .post<BlockUserResponse.RootObject>(\"block_user\", {\r\n          token: this.token.get(),\r\n          user_email: userId\r\n        });\r\n      return QUser.fromJson(resp.results.user);\r\n    },\r\n    async getBlockedUser(\r\n      page: number = 1,\r\n      limit: number = 20\r\n    ): Promise<IQUser[]> {\r\n      const url = QUrlBuilder(\"get_user_list\")\r\n        .param(\"token\", this.token.get())\r\n        .param(\"page\", page)\r\n        .param(\"limit\", limit)\r\n        .build();\r\n      const resp = await http\r\n        .get()\r\n        .get<BlockedUserListResponse.RootObject>(url);\r\n      return resp.results.users.map(user => QUser.fromJson(user));\r\n    },\r\n    async getUserList(\r\n      query: string = \"\",\r\n      page: number = 1,\r\n      limit: number = 20\r\n    ): Promise<IQUser[]> {\r\n      const url = QUrlBuilder(\"get_user_list\")\r\n        .param(\"token\", token.get())\r\n        .param(\"query\", query)\r\n        .param(\"page\", page)\r\n        .param(\"limit\", limit)\r\n        .build();\r\n      const resp = await http.get().get<UserListResponse.RootObject>(url);\r\n      return resp.results.users.map((user: any) => QUser.fromJson(user));\r\n    },\r\n    async unblockUser(userId: string): Promise<IQUser> {\r\n      const resp = await http\r\n        .get()\r\n        .post<BlockUserResponse.RootObject>(\"unblock_user\", {\r\n          token: this.token.get(),\r\n          user_email: userId\r\n        });\r\n      return QUser.fromJson(resp.results.user);\r\n    },\r\n    async setUserFromIdentityToken(identityToken: string): Promise<IQUser> {\r\n      const resp = await http\r\n        .get()\r\n        .post<UserResponse.RootObject>(\"auth/verify_identity_token\", {\r\n          identity_token: identityToken\r\n        });\r\n      const user = QUser.fromJson(resp.results.user);\r\n      currentUser.set(user);\r\n      token.set(resp.results.user.token);\r\n      return user;\r\n    },\r\n    async updateUser(\r\n      name?: string,\r\n      avatarUrl?: string,\r\n      extras?: string\r\n    ): Promise<IQUser> {\r\n      const data = {\r\n        token: this.token.get(),\r\n        name,\r\n        avatar_url: avatarUrl,\r\n        extras: extras\r\n      };\r\n      const resp = await http\r\n        .get()\r\n        .patch<UserResponse.RootObject>(\"my_profile\", data);\r\n      const user = QUser.fromJson(resp.results.user);\r\n      currentUser.set(user);\r\n      return user;\r\n    },\r\n    async getNonce(): Promise<QNonce> {\r\n      const resp = await http.get().post<NonceResponse>(\"auth/nonce\");\r\n      return { expired: resp.results.expired_at, nonce: resp.results.nonce };\r\n    },\r\n    async getUserData(): Promise<IQUser> {\r\n      const url = QUrlBuilder(\"my_profile\")\r\n        .param(\"token\", token.get())\r\n        .build();\r\n      const resp = await http.get().get<UserResponse.RootObject>(url);\r\n      const user = QUser.fromJson(resp.results.user);\r\n      currentUser.set(user);\r\n      return user;\r\n    },\r\n    async registerDeviceToken(\r\n      deviceToken: string,\r\n      platform: string = \"rn\"\r\n    ): Promise<boolean> {\r\n      const resp = await http\r\n        .get()\r\n        .post<DeviceTokenResponse.RootObject>(\"set_user_device_token\", {\r\n          token: token.get(),\r\n          device_platform: platform,\r\n          device_token: deviceToken\r\n        });\r\n      return resp.results.changed;\r\n    },\r\n    async unregisterDeviceToken(\r\n      deviceToken: string,\r\n      platform: string = \"rn\"\r\n    ): Promise<boolean> {\r\n      const resp = await http\r\n        .get()\r\n        .post<DeviceTokenResponse.RootObject>(\"remove_user_device_token\", {\r\n          token: token.get(),\r\n          device_platform: platform,\r\n          device_token: deviceToken\r\n        });\r\n      return resp.results.changed;\r\n    },\r\n    get token() {\r\n      return token;\r\n    },\r\n    get currentUser() {\r\n      return currentUser;\r\n    }\r\n  };\r\n}\r\n\r\n// Response type\r\ndeclare module UserResponse {\r\n  export interface App {\r\n    code: string;\r\n    id: number;\r\n    id_str: string;\r\n    name: string;\r\n  }\r\n\r\n  export interface Avatar2 {\r\n    url: string;\r\n  }\r\n\r\n  export interface Avatar {\r\n    avatar: Avatar2;\r\n  }\r\n\r\n  export interface Extras {\r\n    role: string;\r\n  }\r\n\r\n  export interface User {\r\n    app: App;\r\n    avatar: Avatar;\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    last_comment_id: number;\r\n    last_comment_id_str: string;\r\n    last_sync_event_id: number;\r\n    pn_android_configured: boolean;\r\n    pn_ios_configured: boolean;\r\n    rtKey: string;\r\n    token: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    user: User;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module BlockUserResponse {\r\n  export interface Avatar2 {\r\n    url: string;\r\n  }\r\n\r\n  export interface Avatar {\r\n    avatar: Avatar2;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface User {\r\n    avatar: Avatar;\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    user: User;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module UserListResponse {\r\n  export interface Meta {\r\n    total_data: number;\r\n    total_page: number;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface User {\r\n    avatar_url: string;\r\n    created_at: Date;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    name: string;\r\n    updated_at: Date;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    meta: Meta;\r\n    users: User[];\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module BlockedUserListResponse {\r\n  export interface Avatar2 {\r\n    url: string;\r\n  }\r\n\r\n  export interface Avatar {\r\n    avatar: Avatar2;\r\n  }\r\n\r\n  export interface Extras {}\r\n\r\n  export interface BlockedUser {\r\n    avatar: Avatar;\r\n    avatar_url: string;\r\n    email: string;\r\n    extras: Extras;\r\n    id: number;\r\n    id_str: string;\r\n    username: string;\r\n  }\r\n\r\n  export interface Results {\r\n    users: BlockedUser[];\r\n    total: number;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\ndeclare module DeviceTokenResponse {\r\n  export interface Results {\r\n    changed: boolean;\r\n    pn_android_configured: boolean;\r\n    pn_ios_configured: boolean;\r\n  }\r\n\r\n  export interface RootObject {\r\n    results: Results;\r\n    status: number;\r\n  }\r\n}\r\n","import is from 'is_js'\r\nexport const every = <T>(...checkers: Array<Function>) => (item: T) => checkers.every(check => check(item));\r\nexport const some = <T>(...checkers: Array<Function>) => (item: T) => checkers.some(check => check(item));\r\nexport const compose = <T>(msg: string, checker: (it: T) => boolean) => (item: T) => {\r\n  const isFullfiled = checker(item);\r\n  if (isFullfiled) return item;\r\n  throw new TypeError(msg)\r\n};\r\n\r\nconst getName = (item) => Object.keys(item).shift();\r\nconst getMsg = (item, msg) => `\\`${getName(item)}\\` ${msg}`;\r\n\r\nexport const isReqString = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be string');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.string))\r\n};\r\nexport const isReqNumber = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be number');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.number))\r\n};\r\nexport const isReqJson = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be object');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.json))\r\n};\r\nexport const isReqArrayNumber = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be array of number');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.array, is.all.number))\r\n};\r\nexport const isReqArrayString = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be array of string');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.array, is.all.string))\r\n};\r\nexport const isReqArrayOfStringOrNumber = (item: any) => {\r\n  const msg = getMsg(item, 'are required and need to be array of string or array of number');\r\n  return compose(msg, every(is.not.null, is.not.undefined, is.array, some(is.all.number, is.all.string)))\r\n};\r\nexport const isOptArrayNumber = (item: any) => {\r\n  const msg = getMsg(item, 'need to be array of number or null');\r\n  return compose(msg, some(is.null, is.undefined, is.array, is.all.number))\r\n};\r\nexport const isOptArrayString = (item: any) => {\r\n  const msg = getMsg(item, 'need to be array of string or null');\r\n  return compose(msg, some(is.null, is.undefined, is.array, is.all.string))\r\n};\r\nexport const isOptString = (item: any) => {\r\n  const msg = getMsg(item, 'need to be string or null');\r\n  return compose(msg, some(is.null, is.undefined, is.string))\r\n};\r\nexport const isOptNumber = (item: any) => {\r\n  const msg = getMsg(item, 'need to be number or null');\r\n  return compose(msg, some(is.null, is.undefined, is.number))\r\n};\r\nexport const isOptJson = (item: any) => {\r\n  const msg = getMsg(item, 'need to be object or null');\r\n  return compose(msg, some(is.null, is.undefined, is.json))\r\n};\r\nexport const isOptCallback = (item: any) => {\r\n  const msg = getMsg(item, 'need to be function or null');\r\n  return compose(msg, some(is.null, is.undefined, is.function))\r\n};\r\nexport const isOptBoolean = (item: any) => {\r\n  const msg = getMsg(item, 'need to be boolean or null');\r\n  return compose(msg, some(is.null, is.undefined, is.boolean))\r\n};\r\n\r\nexport function isArrayOfNumber(ids: number[] | string[]): ids is number[] {\r\n  return is.all.truthy(is.array(ids), is.all.number(ids))\r\n}\r\nexport function isArrayOfString(ids: number[] | string[]): ids is string[] {\r\n  return is.all.truthy(is.array(ids), is.all.string(ids))\r\n}\r\n","import { Atom, atom } from \"derivable\";\r\nimport xs from \"xstream\";\r\nimport getHttpAdapter, { IQHttpAdapter } from \"./adapters/http\";\r\nimport { getLogger, ILogger } from \"./adapters/logger\";\r\nimport getMessageAdapter, {\r\n  getMessageType,\r\n  QMessage\r\n} from \"./adapters/message\";\r\nimport getRealtimeAdapter, { IQRealtimeAdapter } from \"./adapters/realtime\";\r\nimport getRoomAdapter from \"./adapters/room\";\r\nimport getUserAdapter from \"./adapters/user\";\r\nimport {\r\n  Callback,\r\n  IQCallback,\r\n  IQiscus,\r\n  IQMessage,\r\n  IQMessageAdapter,\r\n  IQMessageStatus,\r\n  IQMessageT,\r\n  IQMessageType,\r\n  IQParticipant,\r\n  IQProgressListener,\r\n  IQRoom,\r\n  IQRoomAdapter,\r\n  IQUser,\r\n  IQUserAdapter,\r\n  Subscription,\r\n  UploadResult\r\n} from \"./defs\";\r\nimport {\r\n  isArrayOfNumber,\r\n  isArrayOfString,\r\n  isOptBoolean,\r\n  isOptCallback,\r\n  isOptJson,\r\n  isOptNumber,\r\n  isOptString,\r\n  isReqArrayOfStringOrNumber,\r\n  isReqArrayString,\r\n  isReqJson,\r\n  isReqNumber,\r\n  isReqString\r\n} from \"./utils/param-utils\";\r\nimport {\r\n  bufferUntil,\r\n  process,\r\n  subscribeOnNext,\r\n  tap,\r\n  toCallbackOrPromise,\r\n  toEventSubscription\r\n} from \"./utils/stream\";\r\n\r\nexport type QSyncMode = \"socket\" | \"http\" | \"both\";\r\n\r\nexport default class Qiscus implements IQiscus {\r\n  private static _instance: Qiscus = null;\r\n\r\n  //<editor-fold desc=\"Property\">\r\n  private readonly _syncMode: Atom<QSyncMode> = atom(\"socket\");\r\n\r\n  private readonly _realtimeAdapter: Atom<IQRealtimeAdapter | null> = atom(\r\n    null\r\n  );\r\n  private readonly _loggerAdapter: Atom<ILogger> = atom(null);\r\n  private readonly _httpAdapter: Atom<IQHttpAdapter | null> = atom(null);\r\n  private readonly _userAdapter: Atom<IQUserAdapter | null> = atom(null);\r\n  private readonly _roomAdapter: Atom<IQRoomAdapter | null> = atom(null);\r\n  private readonly _messageAdapter: Atom<IQMessageAdapter | null> = atom(null);\r\n  private readonly _syncInterval: Atom<number> = atom(5000);\r\n  private readonly _baseUrl: Atom<string> = atom(null);\r\n  private readonly _brokerUrl: Atom<string | null> = atom(null);\r\n  private readonly _appId: Atom<string> = atom(null);\r\n  private readonly _shouldSync = atom(false);\r\n  private readonly _customHeaders = atom<{ [key: string]: string }>(null);\r\n  //</editor-fold>\r\n\r\n  public static get instance(): Qiscus {\r\n    if (this._instance == null) this._instance = new this();\r\n    return this._instance;\r\n  }\r\n\r\n  public get httpAdapter() {\r\n    return this._httpAdapter.get();\r\n  }\r\n  public get realtimeAdapter() {\r\n    return this._realtimeAdapter.get();\r\n  }\r\n  public get userAdapter() {\r\n    return this._userAdapter.get();\r\n  }\r\n  public get roomAdapter() {\r\n    return this._roomAdapter.get();\r\n  }\r\n  public get messageAdapter() {\r\n    return this._messageAdapter.get();\r\n  }\r\n  public get appId() {\r\n    return this._appId.get();\r\n  }\r\n  public get baseUrl() {\r\n    return this._baseUrl.get();\r\n  }\r\n  public get brokerUrl() {\r\n    return this._brokerUrl.get();\r\n  }\r\n  public get token() {\r\n    return this.userAdapter.token.get();\r\n  }\r\n  public get isLogin() {\r\n    return this.currentUser != null;\r\n  }\r\n  public get currentUser() {\r\n    return this._userAdapter\r\n      .derive(adapter => {\r\n        return adapter.currentUser.get();\r\n      })\r\n      .get();\r\n  }\r\n  private get syncInterval() {\r\n    return this._syncInterval.get();\r\n  }\r\n  private get shouldSync() {\r\n    return this._shouldSync.get();\r\n  }\r\n\r\n  setup(appId: string, syncInterval: number = 5000): void {\r\n    this.setupWithCustomServer(\r\n      appId,\r\n      \"https://api.qiscus.com/api/v2/sdk/\",\r\n      \"wss://mqtt.qiscus.com:1886/mqtt\",\r\n      null,\r\n      syncInterval\r\n    );\r\n  }\r\n\r\n  setupWithCustomServer(\r\n    appId: string,\r\n    baseUrl: string,\r\n    brokerUrl: string,\r\n    brokerLBUrl: string,\r\n    syncInterval: number = 5000\r\n  ): void {\r\n    this._appId.set(appId);\r\n    this._baseUrl.set(baseUrl);\r\n    this._brokerUrl.set(brokerUrl);\r\n    this._syncMode.set(\"socket\");\r\n    this._syncInterval.set(syncInterval);\r\n    this._loggerAdapter.set(getLogger());\r\n    this._httpAdapter.set(\r\n      getHttpAdapter({\r\n        baseUrl: this.baseUrl,\r\n        httpHeader: this._customHeaders,\r\n        getAppId: () => this.appId,\r\n        getToken: () => this.token,\r\n        getUserId: () => (this.currentUser ? this.currentUser.userId : null),\r\n        getSdkVersion: () => \"3-alpha\"\r\n      })\r\n    );\r\n    this._userAdapter.set(getUserAdapter(this._httpAdapter));\r\n    this._roomAdapter.set(getRoomAdapter(this._httpAdapter, this._userAdapter));\r\n    this._messageAdapter.set(\r\n      getMessageAdapter(this._httpAdapter, this._userAdapter, this._roomAdapter)\r\n    );\r\n    this._realtimeAdapter.set(\r\n      getRealtimeAdapter(\r\n        this._httpAdapter,\r\n        this._messageAdapter,\r\n        this._roomAdapter,\r\n        this._syncInterval,\r\n        this._brokerUrl,\r\n        this._shouldSync,\r\n        this.userAdapter.token.derive(it => it != null),\r\n        this.userAdapter.token\r\n      )\r\n    );\r\n  }\r\n\r\n  setCustomHeader(headers: { [key: string]: string }): void {\r\n    this._customHeaders.set(headers);\r\n  }\r\n\r\n  // User Adapter ------------------------------------------\r\n  setUser(\r\n    userId: string,\r\n    userKey: string,\r\n    username?: string,\r\n    avatarUrl?: string,\r\n    extras?: object | null,\r\n    callback?: null | IQCallback<IQUser>\r\n  ): void | Promise<IQUser> {\r\n    // this method should set currentUser and token\r\n    return xs\r\n      .combine(\r\n        process(userId, isReqString({ userId })),\r\n        process(userKey, isReqString({ userKey })),\r\n        process(username, isOptString({ username })),\r\n        process(avatarUrl, isOptString({ avatarUrl })),\r\n        process(extras, isOptJson({ extras })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([userId, userKey, username, avatarUrl, extras]) => [\r\n        userId,\r\n        userKey,\r\n        username,\r\n        avatarUrl,\r\n        JSON.stringify(extras)\r\n      ])\r\n      .map(([userId, userKey, username, avatarUrl, extras]) =>\r\n        xs.fromPromise(\r\n          this.userAdapter.login(userId, userKey, {\r\n            name: username,\r\n            avatarUrl,\r\n            extras\r\n          })\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(\r\n        tap(it => {\r\n          this.realtimeAdapter.mqtt.connect(it.userId);\r\n          this.realtimeAdapter.mqtt.subscribeUser(this.userAdapter.token.get());\r\n        })\r\n      )\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  blockUser(\r\n    userId: string,\r\n    callback: IQCallback<IQUser>\r\n  ): void | Promise<IQUser> {\r\n    return xs\r\n      .combine(\r\n        process(userId, isReqString({ userId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([userId]) => xs.fromPromise(this.userAdapter.blockUser(userId)))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  clearUser(callback: IQCallback<void>): void | Promise<void> {\r\n    // this method should clear currentUser and token\r\n    return xs\r\n      .combine(process(callback, isOptCallback({ callback })))\r\n      .map(() => xs.fromPromise(Promise.resolve(this.userAdapter.clear())))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  unblockUser(\r\n    userId: string,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser> {\r\n    return xs\r\n      .combine(\r\n        process(userId, isReqString({ userId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([userId]) => xs.fromPromise(this.userAdapter.unblockUser(userId)))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  updateUser(\r\n    username: string,\r\n    avatarUrl: string,\r\n    extras?: object,\r\n    callback?: IQCallback<IQUser>\r\n  ): void | Promise<IQUser> {\r\n    // this method should update current user\r\n    return xs\r\n      .combine(\r\n        process(username, isOptString({ username })),\r\n        process(avatarUrl, isOptString({ avatarUrl })),\r\n        process(extras, isOptJson({ extras })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([username, avatarUrl, extras]) => [\r\n        username,\r\n        avatarUrl,\r\n        JSON.stringify(extras)\r\n      ])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([username, avatarUrl, extras]) =>\r\n        xs.fromPromise(this.userAdapter.updateUser(username, avatarUrl, extras))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getBlockedUsers(\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQUser[]>\r\n  ): void | Promise<IQUser[]> {\r\n    return xs\r\n      .combine(\r\n        process(page, isOptNumber({ page })),\r\n        process(limit, isOptNumber({ limit })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([page, limit]) =>\r\n        xs.fromPromise(this.userAdapter.getBlockedUser(page, limit))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getUsers(\r\n    searchUsername?: string,\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQUser[]>\r\n  ): void | Promise<IQUser[]> {\r\n    return xs\r\n      .combine(\r\n        process(searchUsername, isOptString({ searchUsername })),\r\n        process(page, isOptNumber({ page })),\r\n        process(limit, isOptString({ limit })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([search, page, limit]) =>\r\n        xs.fromPromise(this.userAdapter.getUserList(search, page, limit))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getJWTNonce(callback?: IQCallback<string>): void | Promise<string> {\r\n    return xs\r\n      .combine(process(callback, isOptCallback({ callback })))\r\n      .map(() => xs.fromPromise(this.userAdapter.getNonce()))\r\n      .flatten()\r\n      .map(nonce => nonce.nonce)\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getUserData(\r\n    callback?: (response: IQUser, error?: Error) => void\r\n  ): void | Promise<IQUser> {\r\n    // this method should update current user\r\n    return xs\r\n      .combine(process(callback, isOptCallback({ callback })))\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(() => xs.fromPromise(this.userAdapter.getUserData()))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  registerDeviceToken(\r\n    token: string,\r\n    callback?: IQCallback<boolean>\r\n  ): void | Promise<boolean> {\r\n    return xs\r\n      .combine(\r\n        process(token, isReqString({ token })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([token]) =>\r\n        xs.fromPromise(this.userAdapter.registerDeviceToken(token))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  removeDeviceToken(\r\n    token: string,\r\n    callback?: IQCallback<boolean>\r\n  ): void | Promise<boolean> {\r\n    return xs\r\n      .combine(\r\n        process(token, isReqString({ token })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([token]) =>\r\n        xs.fromPromise(this.userAdapter.unregisterDeviceToken(token))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  updateChatRoom(\r\n    roomId: number,\r\n    name?: string | null,\r\n    avatarUrl?: string | null,\r\n    extras?: object | null,\r\n    callback?: (response: IQRoom, error?: Error) => void\r\n  ): void | Promise<IQRoom> {\r\n    // this method should update room list\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(name, isOptString({ name })),\r\n        process(avatarUrl, isOptString({ avatarUrl })),\r\n        process(extras, isOptJson({ extras }))\r\n      )\r\n      .map(([roomId, name, avatarUrl, extras]) => {\r\n        return { roomId, name, avatarUrl, extras: JSON.stringify(extras) };\r\n      })\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(({ roomId, name, avatarUrl, extras }) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.updateRoom(roomId, name, avatarUrl, extras)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  setUserWithIdentityToken(\r\n    token: string,\r\n    callback?: (response: IQUser, error?: Error) => void\r\n  ): void | Promise<IQUser> {\r\n    return xs\r\n      .combine(\r\n        process(token, isReqString({ token })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([token]) =>\r\n        xs.fromPromise(this.userAdapter.setUserFromIdentityToken(token))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getChannel(\r\n    uniqueId: string,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom> {\r\n    throw new Error(\"Method not implemented.\");\r\n    return xs\r\n      .combine(\r\n        process(uniqueId, isReqString({ uniqueId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([uniqueId]) =>\r\n        xs.fromPromise(this.roomAdapter.getChannel(uniqueId))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n  // -------------------------------------------------------\r\n\r\n  // Room Adapter ------------------------------------------\r\n  chatUser(\r\n    userId: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom> {\r\n    return xs\r\n      .combine(\r\n        process(userId, isReqString({ userId })),\r\n        process(extras, isOptJson({ extras })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([userId, extras]) => [userId, JSON.stringify(extras)])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([userId, extras]) =>\r\n        xs.fromPromise(this.roomAdapter.chatUser(userId, extras))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  addParticipants(\r\n    roomId: number,\r\n    userIds: string[],\r\n    callback?: IQCallback<any>\r\n  ): void | Promise<IQParticipant[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(userIds, isReqArrayString({ userIds })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, userIds]) =>\r\n        xs.fromPromise(this.roomAdapter.addParticipants(roomId, userIds))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  // Test me\r\n  removeParticipants(\r\n    roomId: number,\r\n    userIds: string[],\r\n    callback?: IQCallback<IQParticipant[]>\r\n  ): void | Promise<IQParticipant[] | string[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(userIds, isReqArrayString({ userIds })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, userIds]) =>\r\n        xs.fromPromise(this.roomAdapter.removeParticipants(roomId, userIds))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  clearMessagesByChatRoomId(\r\n    roomUniqueIds: string[],\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomUniqueIds, isReqArrayString({ roomIds: roomUniqueIds })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomIds]) => xs.fromPromise(this.roomAdapter.clearRoom(roomIds)))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  createGroupChat(\r\n    name: string,\r\n    userIds: string[],\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom> {\r\n    return xs\r\n      .combine(\r\n        process(name, isReqString({ name })),\r\n        process(userIds, isReqArrayString({ userIds })),\r\n        process(avatarUrl, isOptString({ avatarUrl })),\r\n        process(extras, isOptJson({ extras })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([name, userIds, avatarUrl, extras]) => ({\r\n        name,\r\n        userIds,\r\n        avatarUrl,\r\n        extras: JSON.stringify(extras)\r\n      }))\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(({ name, userIds, avatarUrl, extras }) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.createGroup(name, userIds, avatarUrl, extras)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  createChannel(\r\n    uniqueId: string,\r\n    name: string,\r\n    avatarUrl: string,\r\n    extras: object,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom> {\r\n    return xs\r\n      .combine(\r\n        process(uniqueId, isReqString({ uniqueId })),\r\n        process(name, isReqString({ name })),\r\n        process(avatarUrl, isOptString({ avatarUrl })),\r\n        process(extras, isOptJson({ extras })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .map(([uniqueId, name, avatarUrl, extras]) => [\r\n        uniqueId,\r\n        name,\r\n        avatarUrl,\r\n        JSON.stringify(extras)\r\n      ])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([uniqueId, name, avatarUrl, extras]) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.getChannel(uniqueId, name, avatarUrl, extras)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getParticipants(\r\n    roomUniqueId: string,\r\n    offset?: number,\r\n    sorting?: \"asc\" | \"desc\" | null,\r\n    callback?: IQCallback<IQParticipant[]>\r\n  ): void | Promise<IQParticipant[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomUniqueId, isReqString({ roomUniqueId })),\r\n        process(offset, isOptNumber({ offset })),\r\n        process(sorting, isOptString({ sorting })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, offset, sorting]) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.getParticipantList(roomId, offset, sorting)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getChatRooms(\r\n    roomIds: number[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  getChatRooms(\r\n    uniqueIds: string[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]>;\r\n  getChatRooms(\r\n    ids: number[] | string[],\r\n    page?: number,\r\n    showRemoved?: boolean,\r\n    showParticipant?: boolean,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]> {\r\n    let uniqueIds: string[] | null = null;\r\n    let roomIds: number[] | null = null;\r\n    if (isArrayOfNumber(ids)) {\r\n      roomIds = ids;\r\n    }\r\n    if (isArrayOfString(ids)) {\r\n      uniqueIds = ids;\r\n    }\r\n    return xs\r\n      .combine(\r\n        // process(roomIds, isOptArrayNumber({ roomIds })),\r\n        // process(uniqueIds, isOptArrayString({ uniqueIds })),\r\n        process(ids, isReqArrayOfStringOrNumber({ ids })),\r\n        process(page, isOptNumber({ page })),\r\n        process(showRemoved, isOptBoolean({ showRemoved })),\r\n        process(showParticipant, isOptBoolean({ showParticipant })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([_, page, showRemoved, showParticipant]) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.getRoomInfo(\r\n            roomIds,\r\n            uniqueIds,\r\n            page,\r\n            showRemoved,\r\n            showParticipant\r\n          )\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getAllChatRooms(\r\n    showParticipant?: boolean,\r\n    showRemoved?: boolean,\r\n    showEmpty?: boolean,\r\n    page?: number,\r\n    limit?: number,\r\n    callback?: IQCallback<IQRoom[]>\r\n  ): void | Promise<IQRoom[]> {\r\n    return xs\r\n      .combine(\r\n        process(showParticipant, isOptBoolean({ showParticipant })),\r\n        process(showRemoved, isOptBoolean({ showRemoved })),\r\n        process(showEmpty, isOptBoolean({ showEmpty })),\r\n        process(page, isOptNumber({ page })),\r\n        process(limit, isOptNumber({ limit })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([showParticipant, showRemoved, showEmpty, page, limit]) =>\r\n        xs.fromPromise(\r\n          this.roomAdapter.getRoomList(\r\n            showParticipant,\r\n            showRemoved,\r\n            showEmpty,\r\n            page,\r\n            limit\r\n          )\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getChatRoomWithMessages(\r\n    roomId: number,\r\n    callback?: IQCallback<IQRoom>\r\n  ): void | Promise<IQRoom> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId]) => xs.fromPromise(this.roomAdapter.getRoom(roomId)))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getTotalUnreadCount(callback?: IQCallback<number>): void | Promise<number> {\r\n    return xs\r\n      .combine(process(callback, isOptCallback({ callback })))\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(() => xs.fromPromise(this.roomAdapter.getUnreadCount()))\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n  // ------------------------------------------------------\r\n\r\n  // Message Adapter --------------------------------------\r\n  sendMessage(\r\n    roomId: number,\r\n    message: IQMessageT,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(message, isReqJson({ message })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        tap(([roomId, message]) => {\r\n          const m = QMessage.prepareNew(\r\n            this.currentUser.userId,\r\n            roomId,\r\n            message.message,\r\n            getMessageType(message.type),\r\n            message.extras,\r\n            message.payload\r\n          );\r\n          m.status = IQMessageStatus.Sending;\r\n        })\r\n      )\r\n      .map(([roomId, message]) =>\r\n        xs.fromPromise(this.messageAdapter.sendMessage(roomId, message))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  markAsDelivered(\r\n    roomId: number,\r\n    messageId: number,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(messageId, isReqNumber({ messageId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, messageId]) =>\r\n        xs.fromPromise(this.messageAdapter.markAsDelivered(roomId, messageId))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  markAsRead(\r\n    roomId: number,\r\n    messageId: number,\r\n    callback?: IQCallback<IQMessage>\r\n  ): void | Promise<IQMessage> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(messageId, isReqNumber({ messageId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, messageId]) =>\r\n        xs.fromPromise(this.messageAdapter.markAsRead(roomId, messageId))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  deleteMessages(\r\n    messageUniqueIds: string[],\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]> {\r\n    return xs\r\n      .combine(\r\n        process(messageUniqueIds, isReqArrayString({ messageUniqueIds })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([messageUniqueIds]) =>\r\n        xs.fromPromise(this.messageAdapter.deleteMessage(messageUniqueIds))\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getPreviouseMessagesById(\r\n    roomId: number,\r\n    limit?: number,\r\n    messageId?: number,\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(limit, isOptNumber({ limit })),\r\n        process(messageId, isOptNumber({ messageId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, limit, messageId]) =>\r\n        xs.fromPromise(\r\n          this.messageAdapter.getMessages(roomId, messageId, limit, false)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  getNextMessagesById(\r\n    roomId: number,\r\n    limit?: number,\r\n    messageId?: number,\r\n    callback?: IQCallback<IQMessage[]>\r\n  ): void | Promise<IQMessage[]> {\r\n    return xs\r\n      .combine(\r\n        process(roomId, isReqNumber({ roomId })),\r\n        process(limit, isOptNumber({ limit })),\r\n        process(messageId, isOptNumber({ messageId })),\r\n        process(callback, isOptCallback({ callback }))\r\n      )\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .map(([roomId, limit, messageId]) =>\r\n        xs.fromPromise(\r\n          this.messageAdapter.getMessages(roomId, messageId, limit, true)\r\n        )\r\n      )\r\n      .flatten()\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n  // -------------------------------------------------------\r\n\r\n  // Misc --------------------------------------------------\r\n  publishCustomEvent(roomId: number, data: any): void {\r\n    const userId = this.currentUser.userId;\r\n    this.realtimeAdapter.mqtt.publishCustomEvent(roomId, userId, data);\r\n  }\r\n\r\n  publishOnlinePresence(isOnline: boolean): void {\r\n    this.realtimeAdapter.sendPresence(this.currentUser.userId, isOnline);\r\n  }\r\n  publishTyping(roomId: number, isTyping?: boolean): void {\r\n    this.realtimeAdapter.sendTyping(\r\n      roomId,\r\n      this.currentUser.userId,\r\n      isTyping || true\r\n    );\r\n  }\r\n\r\n  subscribeCustomEvent(roomId: number, callback: IQCallback<any>): void {\r\n    this.realtimeAdapter.mqtt.subscribeCustomEvent(roomId, callback);\r\n  }\r\n\r\n  unsubscribeCustomEvent(roomId: number): void {\r\n    this.realtimeAdapter.mqtt.unsubscribeCustomEvent(roomId);\r\n  }\r\n\r\n  upload(file: File, callback?: IQProgressListener): void {\r\n    const data = new FormData();\r\n    data.append(\"file\", file);\r\n    data.append(\"token\", this.token);\r\n    this.httpAdapter\r\n      .upload<UploadResult>(\"upload\", data, progress =>\r\n        callback(null, progress)\r\n      )\r\n      .then(res => {\r\n        const fileUrl = res.results.file.url;\r\n        callback(null, null, fileUrl);\r\n      })\r\n      .catch(error => callback(error));\r\n  }\r\n\r\n  hasSetupUser(callback: (isSetup: boolean) => void): void | Promise<boolean> {\r\n    return xs\r\n      .of(this.currentUser)\r\n      .map(user => user != null)\r\n      .compose(toCallbackOrPromise(callback));\r\n  }\r\n\r\n  sendFileMessage(\r\n    roomId: number,\r\n    message: string,\r\n    file: File,\r\n    callback?: (error: Error, progress?: number, message?: IQMessage) => void\r\n  ): void {\r\n    this.upload(file, (error, progress, url) => {\r\n      if (error) return callback(error);\r\n      if (progress) callback(null, progress);\r\n      if (url) {\r\n        const _message = {\r\n          payload: {\r\n            url,\r\n            file_name: file.name,\r\n            size: file.size,\r\n            caption: message\r\n          },\r\n          extras: {},\r\n          type: IQMessageType.Attachment,\r\n          message: `[file] ${url} [/file]`\r\n        };\r\n        this.sendMessage(roomId, _message, msg => {\r\n          callback(null, null, msg);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getThumbnailURL(url: string) {\r\n    return url.replace(\"/upload/\", \"/upload/w_30,c_scale/\");\r\n  }\r\n\r\n  setSyncInterval(interval: number): void {\r\n    this._syncInterval.set(interval);\r\n  }\r\n\r\n  synchronize(lastMessageId: number): void {\r\n    this.realtimeAdapter.synchronize(lastMessageId);\r\n  }\r\n\r\n  synchronizeEvent(lastEventId: number): void {\r\n    this.realtimeAdapter.synchronizeEvent(lastEventId);\r\n  }\r\n\r\n  enableDebugMode(enable: boolean) {\r\n    this._loggerAdapter.get().setEnable(enable);\r\n  }\r\n\r\n  onMessageReceived(handler: (message: IQMessage) => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onNewMessage));\r\n  }\r\n  onMessageDeleted(handler: (message: IQMessage) => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onMessageDeleted));\r\n  }\r\n  onMessageDelivered(handler: (message: IQMessage) => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onMessageDelivered));\r\n  }\r\n  onMessageRead(handler: (message: IQMessage) => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onMessageRead));\r\n  }\r\n  onUserTyping(\r\n    handler: (userId: string, roomId: number, isTyping: boolean) => void\r\n  ): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onTyping));\r\n  }\r\n  onUserOnlinePresence(\r\n    handler: (userId: string, isOnline: boolean, lastSeen: Date) => void\r\n  ): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onPresence));\r\n  }\r\n  onChatRoomCleared(handler: Callback<number>): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.onRoomCleared));\r\n  }\r\n  onConnected(handler: () => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(toEventSubscription(this.realtimeAdapter.mqtt.onMqttConnected));\r\n  }\r\n  onReconnecting(handler: () => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        toEventSubscription(this.realtimeAdapter.mqtt.onMqttReconnecting)\r\n      );\r\n  }\r\n  onDisconnected(handler: () => void): Subscription {\r\n    return xs\r\n      .of(handler)\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        toEventSubscription(this.realtimeAdapter.mqtt.onMqttDisconnected)\r\n      );\r\n  }\r\n  subscribeChatRoom(room: IQRoom): void {\r\n    xs.of([room])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        subscribeOnNext(([room]) => {\r\n          if (room.isChannel)\r\n            this.realtimeAdapter.mqtt.subscribeChannel(\r\n              this.appId,\r\n              room.uniqueId\r\n            );\r\n          else this.realtimeAdapter.mqtt.subscribeRoom(room.id);\r\n        })\r\n      );\r\n  }\r\n  unsubscribeChatRoom(room: IQRoom): void {\r\n    xs.of([room])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        subscribeOnNext(([room]) => {\r\n          if (room.isChannel)\r\n            this.realtimeAdapter.mqtt.subscribeChannel(\r\n              this.appId,\r\n              room.uniqueId\r\n            );\r\n          else this.realtimeAdapter.mqtt.subscribeRoom(room.id);\r\n        })\r\n      );\r\n  }\r\n  subscribeUserOnlinePresence(userId: string): void {\r\n    xs.of([userId])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        subscribeOnNext(([userId]) =>\r\n          this.realtimeAdapter.mqtt.subscribeUserPresence(userId)\r\n        )\r\n      );\r\n  }\r\n  unsubscribeUserOnlinePresence(userId: string): void {\r\n    xs.of([userId])\r\n      .compose(bufferUntil(() => this.isLogin))\r\n      .compose(\r\n        subscribeOnNext(([userId]) =>\r\n          this.realtimeAdapter.mqtt.unsubscribeUserPresence(userId)\r\n        )\r\n      );\r\n  }\r\n}\r\n"],"names":["getHttpAdapter","baseUrl","httpHeader","getAppId","getUserId","getToken","getSdkVersion","api","axios","create","baseURL","interceptors","request","use","req","headers","qiscus_sdk_app_id","qiscus_sdk_user_id","qiscus_sdk_token","qiscus_sdk_version","qiscus_sdk_platform","additionalHeaders","get","Object","keys","forEach","key","assign","delete","path","data","then","it","patch","post","postFormData","form","put","upload","progressCallback","onUploadProgress","progress","percentage","loaded","total","getLogger","enabled","atom","log","derive","isEnabled","args","console","setEnable","enable","set","IQRoomType","IQMessageStatus","IQMessageType","QUrlBuilder","basePath","params","getQuery","value","param","build","query","filter","map","Array","isArray","join","concat","lessThanEq","a","b","getMessageType","type","Custom","Text","QMessage","json","id","content","message","previousMessageId","comment_before_id","roomId","room_id","timestamp","Date","userId","email","uniqueId","unique_temp_id","extras","payload","status","Delivered","Read","updateFromJson","Sending","cuid","getMessageAdapter","http","user","roomAdapter","messages","getMessageDataWithId","messageId","lens","values","find","update","msgs","sendMessage","messageT","currentUser","prepareNew","FormData","append","token","JSON","stringify","resp","results","comment","getMessages","lastMessageId","limit","after","url","res","comments","_messages","fromJson","msg","deleteMessage","messageIds","markAsRead","adapter","result","selector","mod","findBy","of","user_id","transformer","lastReadMessageId","last_comment_read_id","getRoomDataWithId","room","lowestMessageId","participants","sort","reduce","_selector","matching","_transformer","markAsDelivered","lastReceivedMessageId","last_comment_received_id","changer","getSyncAdapter","messageAdapter","emitter","EventEmitter","lastEventId","synchronize","meta","last_received_comment_id","emit","error","synchronizeEvent","eventId","events","lastId","slice","pop","event","action_topic","onNewMessage","callback","on","off","onMessageDelivered","handler","comment_id","comment_unique_id","onMessageRead","onMessageDeleted","deleted_messages","message_unique_ids","flatten","onRoomCleared","rooms","deleted_rooms","_catchAllSymbol","Symbol","_patternOR","_patternORStr","toString","_patternAND","_patternANDStr","_patternRANGE","_patternRANGEStr","_patternREGEXP","_patternREGEXPStr","EXTRACT_PATTERN_AND_FLAGS","MissingCatchAllPattern","Error","call","stack","prototype","match","obj","arguments","length","matchers","push","when","unserialize","position","getOwnPropertySymbols","indexOf","calculateResult","input","matched","matcher","props","RegExp","_serialize","__uid","mixed","_unserialize","str","parse","_true","_match","_matching","test","_typeof","prop","shift","some","every","exec","bind","or","and","range","start","end","serializedKey","deserialized","matcherConfiguration","reNewMessage","reNotification","reTyping","reDelivery","reRead","reOnlineStatus","reChannelMessage","reCustomEvent","getMqttHandler","channelMessageHandler","topic","topicData","channelUniqueId","customEventHandler","notificationHandler","deletedMessagesData","parseInt","clearedRooms","onlineHandler","split","isOnline","Number","lastSeen","deliveredHandler","messageUniqueId","newMessage","readHandler","typingHandler","isTyping","getMqttAdapter","brokerUrl","subscribedCustomEventTopics","Map","getTopic","logger","mqtt","has","connect","_mqtt","will","retain","func","onMqttConnected","onMqttReconnecting","onMqttDisconnected","onNewChannelMessage","onRoomDeleted","onUserPresence","onUserTyping","publishCustomEvent","sender","publish","subscribeCustomEvent","subscribe","unsubscribeCustomEvent","unsubscribe","sendPresence","sendTyping","subscribeUser","userToken","subscribeUserPresence","unsubscribeUserPresence","subscribeRoom","unsubscribeRoom","subscribeChannel","appId","unsubscribeChannel","toPromise","stream","Promise","resolve","reject","next","complete","toCallback","subscription","toCallbackOrPromise","tryCatch","fn","onError","process","item","checkers","xs","listener","check","stop","tap","onNext","onComplete","sleep","time","setTimeout","bufferUntil","buffer","err","subscribeOnNext","toEventSubscription","eventSubscribe","subs","fromSync","method","getRealtimeAdapter","syncInterval","shouldSync","isLogin","isMqttConnected","sync","periodic","merge","compose","catch","onPresence","onTyping","QParticipant","avatarUrl","avatar_url","displayName","username","QRoom","isChannel","is_public_channel","lastMessageContent","last_comment_message","last_comment_id","name","room_name","unique_id","unreadCount","unread_count","room_total_participants","totalParticipants","options","chat_type","Single","Group","getRoomAdapter","getRoomDataWithUniqueId","roomUniqueId","addParticipants","participantIds","participants_added","removeParticipants","removedIds","participants_removed","roomLens","includes","p","chatUser","emails","clearRoom","roomUniqueIds","createGroup","userIds","getChannel","getParticipantList","offset","sorting","participant","getRoom","getRoomInfo","roomIds","uniqueIds","showRemoved","showParticipant","_rooms","rooms_info","last_comment","last_comment_id_str","id_str","last_topic_id","topic_id","last_topic_id_str","topic_id_str","getRoomList","showEmpty","page","rs","getUnreadCount","total_unread_count","updateRoom","QUser","getUserAdapter","login","userKey","password","clear","blockUser","user_email","getBlockedUser","users","getUserList","unblockUser","setUserFromIdentityToken","identityToken","identity_token","updateUser","getNonce","expired","expired_at","nonce","getUserData","registerDeviceToken","deviceToken","platform","device_platform","device_token","changed","unregisterDeviceToken","checker","isFullfiled","TypeError","getName","getMsg","isReqString","is","not","null","undefined","string","isReqNumber","number","isReqJson","isReqArrayString","array","all","isReqArrayOfStringOrNumber","isOptString","isOptNumber","isOptJson","isOptCallback","function","isOptBoolean","boolean","isArrayOfNumber","ids","truthy","isArrayOfString","Qiscus","setupWithCustomServer","_appId","_baseUrl","_brokerUrl","_syncMode","_syncInterval","_loggerAdapter","_httpAdapter","_customHeaders","_this","_userAdapter","_roomAdapter","_messageAdapter","_realtimeAdapter","_shouldSync","userAdapter","combine","fromPromise","_this2","realtimeAdapter","_this3","_this4","_this5","_this6","_this7","searchUsername","_this8","search","_this9","_this10","_this11","_this12","_this13","_this14","_this16","_this17","_this18","_this19","_this20","_this21","_this22","_this23","_","_this24","_this25","_this26","_this27","m","_this28","_this29","messageUniqueIds","_this30","_this31","_this32","file","httpAdapter","fileUrl","_message","file_name","size","caption","Attachment","_this33","replace","interval","_this34","_this35","_this36","_this37","_this38","_this39","_this40","_this41","_this42","_this43","_this44","_this45","_this46","_this47","_instance"],"mappings":"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"}